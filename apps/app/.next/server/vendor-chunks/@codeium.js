"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@codeium";
exports.ids = ["vendor-chunks/@codeium"];
exports.modules = {

/***/ "(ssr)/../../node_modules/@codeium/react-code-editor/dist/esm/index.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/@codeium/react-code-editor/dist/esm/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodeiumEditor: () => (/* binding */ CodeiumEditor),\n/* harmony export */   Document: () => (/* binding */ Document$1),\n/* harmony export */   Language: () => (/* binding */ Language)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ CodeiumEditor,Document,Language auto */ if (false) {}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ function __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Assert that condition is truthy or throw error (with message)\n */ function assert(condition, msg) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\nconst FLOAT32_MAX = 3.4028234663852886e38, FLOAT32_MIN = -3.4028234663852886e38, UINT32_MAX = 0xffffffff, INT32_MAX = 0x7fffffff, INT32_MIN = -0x80000000;\n/**\n * Assert a valid signed protobuf 32-bit integer.\n */ function assertInt32(arg) {\n    if (typeof arg !== \"number\") throw new Error(\"invalid int 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN) throw new Error(\"invalid int 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid unsigned protobuf 32-bit integer.\n */ function assertUInt32(arg) {\n    if (typeof arg !== \"number\") throw new Error(\"invalid uint 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0) throw new Error(\"invalid uint 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid protobuf float value.\n */ function assertFloat32(arg) {\n    if (typeof arg !== \"number\") throw new Error(\"invalid float 32: \" + typeof arg);\n    if (!Number.isFinite(arg)) return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN) throw new Error(\"invalid float 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nconst enumTypeSymbol = Symbol(\"@bufbuild/protobuf/enum-type\");\n/**\n * Get reflection information from a generated enum.\n * If this function is called on something other than a generated\n * enum, it raises an error.\n */ function getEnumType(enumObject) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any\n    const t = enumObject[enumTypeSymbol];\n    assert(t, \"missing enum type on enum object\");\n    return t; // eslint-disable-line @typescript-eslint/no-unsafe-return\n}\n/**\n * Sets reflection information on a generated enum.\n */ function setEnumType(enumObject, typeName, values, opt) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map((v)=>({\n            no: v.no,\n            name: v.name,\n            localName: enumObject[v.no]\n        })));\n}\n/**\n * Create a new EnumType with the given values.\n */ function makeEnumType(typeName, values, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n_opt) {\n    const names = Object.create(null);\n    const numbers = Object.create(null);\n    const normalValues = [];\n    for (const value of values){\n        // We do not surface options at this time\n        // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};\n        const n = normalizeEnumValue(value);\n        normalValues.push(n);\n        names[value.name] = n;\n        numbers[value.no] = n;\n    }\n    return {\n        typeName,\n        values: normalValues,\n        // We do not surface options at this time\n        // options: opt?.options ?? Object.create(null),\n        findName (name) {\n            return names[name];\n        },\n        findNumber (no) {\n            return numbers[no];\n        }\n    };\n}\n/**\n * Create a new enum object with the given values.\n * Sets reflection information.\n */ function makeEnum(typeName, values, opt) {\n    const enumObject = {};\n    for (const value of values){\n        const n = normalizeEnumValue(value);\n        enumObject[n.localName] = n.no;\n        enumObject[n.no] = n.localName;\n    }\n    setEnumType(enumObject, typeName, values);\n    return enumObject;\n}\nfunction normalizeEnumValue(value) {\n    if (\"localName\" in value) {\n        return value;\n    }\n    return Object.assign(Object.assign({}, value), {\n        localName: value.name\n    });\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Message is the base class of every message, generated, or created at\n * runtime.\n *\n * It is _not_ safe to extend this class. If you want to create a message at\n * run time, use proto3.makeMessageType().\n */ class Message {\n    /**\n     * Compare with a message of the same type.\n     */ equals(other) {\n        return this.getType().runtime.util.equals(this.getType(), this, other);\n    }\n    /**\n     * Create a deep copy.\n     */ clone() {\n        return this.getType().runtime.util.clone(this);\n    }\n    /**\n     * Parse from binary data, merging fields.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */ fromBinary(bytes, options) {\n        const type = this.getType(), format = type.runtime.bin, opt = format.makeReadOptions(options);\n        format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON value.\n     */ fromJson(jsonValue, options) {\n        const type = this.getType(), format = type.runtime.json, opt = format.makeReadOptions(options);\n        format.readMessage(type, jsonValue, opt, this);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON string.\n     */ fromJsonString(jsonString, options) {\n        let json;\n        try {\n            json = JSON.parse(jsonString);\n        } catch (e) {\n            throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e instanceof Error ? e.message : String(e)}`);\n        }\n        return this.fromJson(json, options);\n    }\n    /**\n     * Serialize the message to binary data.\n     */ toBinary(options) {\n        const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();\n        bin.writeMessage(this, writer, opt);\n        return writer.finish();\n    }\n    /**\n     * Serialize the message to a JSON value, a JavaScript value that can be\n     * passed to JSON.stringify().\n     */ toJson(options) {\n        const type = this.getType(), json = type.runtime.json, opt = json.makeWriteOptions(options);\n        return json.writeMessage(this, opt);\n    }\n    /**\n     * Serialize the message to a JSON string.\n     */ toJsonString(options) {\n        var _a;\n        const value = this.toJson(options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Override for serialization behavior. This will be invoked when calling\n     * JSON.stringify on this message (i.e. JSON.stringify(msg)).\n     *\n     * Note that this will not serialize google.protobuf.Any with a packed\n     * message because the protobuf JSON format specifies that it needs to be\n     * unpacked, and this is only possible with a type registry to look up the\n     * message type.  As a result, attempting to serialize a message with this\n     * type will throw an Error.\n     *\n     * This method is protected because you should not need to invoke it\n     * directly -- instead use JSON.stringify or toJsonString for\n     * stringified JSON.  Alternatively, if actual JSON is desired, you should\n     * use toJson.\n     */ toJSON() {\n        return this.toJson({\n            emitDefaultValues: true\n        });\n    }\n    /**\n     * Retrieve the MessageType of this message - a singleton that represents\n     * the protobuf message declaration and provides metadata for reflection-\n     * based operations.\n     */ getType() {\n        // Any class that extends Message _must_ provide a complete static\n        // implementation of MessageType.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n        return Object.getPrototypeOf(this).constructor;\n    }\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create a new message type using the given runtime.\n */ function makeMessageType(runtime, typeName, fields, opt) {\n    var _a;\n    const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(\".\") + 1);\n    const type = {\n        [localName]: function(data) {\n            runtime.util.initFields(this);\n            runtime.util.initPartial(data, this);\n        }\n    }[localName];\n    Object.setPrototypeOf(type.prototype, new Message());\n    Object.assign(type, {\n        runtime,\n        typeName,\n        fields: runtime.util.newFieldList(fields),\n        fromBinary (bytes, options) {\n            return new type().fromBinary(bytes, options);\n        },\n        fromJson (jsonValue, options) {\n            return new type().fromJson(jsonValue, options);\n        },\n        fromJsonString (jsonString, options) {\n            return new type().fromJsonString(jsonString, options);\n        },\n        equals (a, b) {\n            return runtime.util.equals(type, a, b);\n        }\n    });\n    return type;\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nfunction makeProtoRuntime(syntax, json, bin, util) {\n    return {\n        syntax,\n        json,\n        bin,\n        util,\n        makeMessageType (typeName, fields, opt) {\n            return makeMessageType(this, typeName, fields, opt);\n        },\n        makeEnum,\n        makeEnumType,\n        getEnumType\n    };\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */ var ScalarType;\n(function(ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of fields with 64 bit integral types (int64, uint64,\n * sint64, fixed64, sfixed64).\n *\n * This is a subset of google.protobuf.FieldOptions.JSType, which defines JS_NORMAL,\n * JS_STRING, and JS_NUMBER. Protobuf-ES uses BigInt by default, but will use\n * String if `[jstype = JS_STRING]` is specified.\n *\n * ```protobuf\n * uint64 field_a = 1; // BigInt\n * uint64 field_b = 2 [jstype = JS_NORMAL]; // BigInt\n * uint64 field_b = 2 [jstype = JS_NUMBER]; // BigInt\n * uint64 field_b = 2 [jstype = JS_STRING]; // String\n * ```\n */ var LongType;\n(function(LongType) {\n    /**\n     * Use JavaScript BigInt.\n     */ LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript String.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */ LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n})(LongType || (LongType = {}));\n// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */ /**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [1]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */ function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for(let shift = 0; shift < 28; shift += 7){\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [\n                lowBits,\n                highBits\n            ];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0f) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [\n            lowBits,\n            highBits\n        ];\n    }\n    for(let shift = 3; shift <= 31; shift += 7){\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [\n                lowBits,\n                highBits\n            ];\n        }\n    }\n    throw new Error(\"invalid varint\");\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */ function varint64write(lo, hi, bytes) {\n    for(let i = 0; i < 28; i = i + 7){\n        const shift = lo >>> i;\n        const hasNext = !(shift >>> 7 == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = lo >>> 28 & 0x0f | (hi & 0x07) << 4;\n    const hasMoreBits = !(hi >> 3 == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\n    if (!hasMoreBits) {\n        return;\n    }\n    for(let i = 3; i < 31; i = i + 7){\n        const shift = hi >>> i;\n        const hasNext = !(shift >>> 7 == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push(hi >>> 31 & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */ function int64FromString(dec) {\n    // Check for minus sign.\n    const minus = dec[0] === \"-\";\n    if (minus) {\n        dec = dec.slice(1);\n    }\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\n}\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */ function int64ToString(lo, hi) {\n    let bits = newBits(lo, hi);\n    // If we're treating the input as a signed value and the high bit is set, do\n    // a manual two's complement conversion before the decimal conversion.\n    const negative = bits.hi & 0x80000000;\n    if (negative) {\n        bits = negate(bits.lo, bits.hi);\n    }\n    const result = uInt64ToString(bits.lo, bits.hi);\n    return negative ? \"-\" + result : result;\n}\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */ function uInt64ToString(lo, hi) {\n    ({ lo, hi } = toUnsigned(lo, hi));\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\n    // highBits <= 0x1FFFFF can be safely expressed with a double and retain\n    // integer precision.\n    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\n    if (hi <= 0x1FFFFF) {\n        return String(TWO_PWR_32_DBL * hi + lo);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    const low = lo & 0xFFFFFF;\n    const mid = (lo >>> 24 | hi << 8) & 0xFFFFFF;\n    const high = hi >> 16 & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + mid * 6777216 + high * 6710656;\n    let digitB = mid + high * 8147497;\n    let digitC = high * 2;\n    // Apply carries from A to B and from B to C.\n    const base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // If digitC is 0, then we should have returned in the trivial code path\n    // at the top for non-safe integers. Given this, we can assume both digitB\n    // and digitA need leading zeros.\n    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);\n}\nfunction toUnsigned(lo, hi) {\n    return {\n        lo: lo >>> 0,\n        hi: hi >>> 0\n    };\n}\nfunction newBits(lo, hi) {\n    return {\n        lo: lo | 0,\n        hi: hi | 0\n    };\n}\n/**\n * Returns two's compliment negation of input.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n */ function negate(lowBits, highBits) {\n    highBits = ~highBits;\n    if (lowBits) {\n        lowBits = ~lowBits + 1;\n    } else {\n        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\n        // adding 1 to that, results in 0x100000000, which leaves\n        // the low bits 0x0 and simply adds one to the high bits.\n        highBits += 1;\n    }\n    return newBits(lowBits, highBits);\n}\n/**\n * Returns decimal representation of digit1e7 with leading zeros.\n */ const decimalFrom1e7WithLeadingZeros = (digit1e7)=>{\n    const partial = String(digit1e7);\n    return \"0000000\".slice(partial.length) + partial;\n};\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */ function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while(value > 0x7f){\n            bytes.push(value & 0x7f | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    } else {\n        for(let i = 0; i < 9; i++){\n            bytes.push(value & 127 | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */ function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7f;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0f) << 28;\n    for(let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)b = this.buf[this.pos++];\n    if ((b & 0x80) != 0) throw new Error(\"invalid varint\");\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nfunction makeInt64Support() {\n    const dv = new DataView(new ArrayBuffer(8));\n    // note that Safari 14 implements BigInt, but not the DataView methods\n    const ok = typeof BigInt === \"function\" && typeof dv.getBigInt64 === \"function\" && typeof dv.getBigUint64 === \"function\" && typeof dv.setBigInt64 === \"function\" && typeof dv.setBigUint64 === \"function\" && (typeof process != \"object\" || typeof process.env != \"object\" || process.env.BUF_BIGINT_DISABLE !== \"1\");\n    if (ok) {\n        const MIN = BigInt(\"-9223372036854775808\"), MAX = BigInt(\"9223372036854775807\"), UMIN = BigInt(\"0\"), UMAX = BigInt(\"18446744073709551615\");\n        return {\n            zero: BigInt(0),\n            supported: true,\n            parse (value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > MAX || bi < MIN) {\n                    throw new Error(`int64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            uParse (value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > UMAX || bi < UMIN) {\n                    throw new Error(`uint64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            enc (value) {\n                dv.setBigInt64(0, this.parse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true)\n                };\n            },\n            uEnc (value) {\n                dv.setBigInt64(0, this.uParse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true)\n                };\n            },\n            dec (lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigInt64(0, true);\n            },\n            uDec (lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigUint64(0, true);\n            }\n        };\n    }\n    const assertInt64String = (value)=>assert(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);\n    const assertUInt64String = (value)=>assert(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);\n    return {\n        zero: \"0\",\n        supported: false,\n        parse (value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return value;\n        },\n        uParse (value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return value;\n        },\n        enc (value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return int64FromString(value);\n        },\n        uEnc (value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return int64FromString(value);\n        },\n        dec (lo, hi) {\n            return int64ToString(lo, hi);\n        },\n        uDec (lo, hi) {\n            return uInt64ToString(lo, hi);\n        }\n    };\n}\nconst protoInt64 = makeInt64Support();\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */ /**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */ var WireType;\n(function(WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */ WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */ WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */ WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Used for groups\n     * @deprecated\n     */ WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * Used for groups\n     * @deprecated\n     */ WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */ WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\nclass BinaryWriter {\n    constructor(textEncoder){\n        /**\n         * Previous fork states.\n         */ this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */ finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for(let i = 0; i < this.chunks.length; i++)len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for(let i = 0; i < this.chunks.length; i++){\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */ fork() {\n        this.stack.push({\n            chunks: this.chunks,\n            buf: this.buf\n        });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */ join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev) throw new Error(\"invalid state, fork stack empty\");\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */ tag(fieldNo, type) {\n        return this.uint32((fieldNo << 3 | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */ raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */ uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while(value > 0x7f){\n            this.buf.push(value & 0x7f | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */ int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */ bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */ bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */ string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */ float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */ double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */ fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */ sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */ sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = (value << 1 ^ value >> 31) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */ sfixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */ fixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */ int64(value) {\n        let tc = protoInt64.enc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */ sint64(value) {\n        let tc = protoInt64.enc(value), // zigzag encode\n        sign = tc.hi >> 31, lo = tc.lo << 1 ^ sign, hi = (tc.hi << 1 | tc.lo >>> 31) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */ uint64(value) {\n        let tc = protoInt64.uEnc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n}\nclass BinaryReader {\n    constructor(buf, textDecoder){\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */ this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */ tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5) throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [\n            fieldNo,\n            wireType\n        ];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */ skip(wireType) {\n        let start = this.pos;\n        switch(wireType){\n            case WireType.Varint:\n                while(this.buf[this.pos++] & 0x80){\n                // ignore\n                }\n                break;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit64:\n                this.pos += 4;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // From descriptor.proto: Group type is deprecated, not supported in proto3.\n                // But we must still be able to parse and treat as unknown.\n                let t;\n                while((t = this.tag()[1]) !== WireType.EndGroup){\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */ assertBounds() {\n        if (this.pos > this.len) throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */ int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */ sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return zze >>> 1 ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */ int64() {\n        return protoInt64.dec(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */ uint64() {\n        return protoInt64.uDec(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */ sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = (lo >>> 1 | (hi & 1) << 31) ^ s;\n        hi = hi >>> 1 ^ s;\n        return protoInt64.dec(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */ bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */ fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */ sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */ fixed64() {\n        return protoInt64.uDec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */ sfixed64() {\n        return protoInt64.dec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */ float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */ double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */ bytes() {\n        let len = this.uint32(), start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */ string() {\n        return this.textDecoder.decode(this.bytes());\n    }\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Wrap a primitive message field value in its corresponding wrapper\n * message. This function is idempotent.\n */ function wrapField(type, value) {\n    if (value instanceof Message || !type.fieldWrapper) {\n        return value;\n    }\n    return type.fieldWrapper.wrapField(value);\n}\n({\n    \"google.protobuf.DoubleValue\": ScalarType.DOUBLE,\n    \"google.protobuf.FloatValue\": ScalarType.FLOAT,\n    \"google.protobuf.Int64Value\": ScalarType.INT64,\n    \"google.protobuf.UInt64Value\": ScalarType.UINT64,\n    \"google.protobuf.Int32Value\": ScalarType.INT32,\n    \"google.protobuf.UInt32Value\": ScalarType.UINT32,\n    \"google.protobuf.BoolValue\": ScalarType.BOOL,\n    \"google.protobuf.StringValue\": ScalarType.STRING,\n    \"google.protobuf.BytesValue\": ScalarType.BYTES\n});\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/no-explicit-any */ /**\n * Returns true if both scalar values are equal.\n */ function scalarEquals(type, a, b) {\n    if (a === b) {\n        // This correctly matches equal values except BYTES and (possibly) 64-bit integers.\n        return true;\n    }\n    // Special case BYTES - we need to compare each byte individually\n    if (type == ScalarType.BYTES) {\n        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\n            return false;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for(let i = 0; i < a.length; i++){\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Special case 64-bit integers - we support number, string and bigint representation.\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch(type){\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // Loose comparison will match between 0n, 0 and \"0\".\n            return a == b;\n    }\n    // Anything that hasn't been caught by strict comparison or special cased\n    // BYTES and 64-bit integers is not equal.\n    return false;\n}\n/**\n * Returns the default value for the given scalar type, following\n * proto3 semantics.\n */ function scalarDefaultValue(type, longType) {\n    switch(type){\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n            return longType == 0 ? protoInt64.zero : \"0\";\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.\n            // We do not use individual cases to save a few bytes code size.\n            return 0;\n    }\n}\n/**\n * Get information for writing a scalar value.\n *\n * Returns tuple:\n * [0]: appropriate WireType\n * [1]: name of the appropriate method of IBinaryWriter\n * [2]: whether the given value is a default value for proto3 semantics\n *\n * If argument `value` is omitted, [2] is always false.\n */ function scalarTypeInfo(type, value) {\n    const isUndefined = value === undefined;\n    let wireType = WireType.Varint;\n    let isIntrinsicDefault = value === 0;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults\n    switch(type){\n        case ScalarType.STRING:\n            isIntrinsicDefault = isUndefined || !value.length;\n            wireType = WireType.LengthDelimited;\n            break;\n        case ScalarType.BOOL:\n            isIntrinsicDefault = value === false;\n            break;\n        case ScalarType.DOUBLE:\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.FLOAT:\n            wireType = WireType.Bit32;\n            break;\n        case ScalarType.INT64:\n            isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and \"0\"\n            break;\n        case ScalarType.UINT64:\n            isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and \"0\"\n            break;\n        case ScalarType.FIXED64:\n            isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and \"0\"\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.BYTES:\n            isIntrinsicDefault = isUndefined || !value.byteLength;\n            wireType = WireType.LengthDelimited;\n            break;\n        case ScalarType.FIXED32:\n            wireType = WireType.Bit32;\n            break;\n        case ScalarType.SFIXED32:\n            wireType = WireType.Bit32;\n            break;\n        case ScalarType.SFIXED64:\n            isIntrinsicDefault = isUndefined || value == 0;\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.SINT64:\n            isIntrinsicDefault = isUndefined || value == 0;\n            break;\n    }\n    const method = ScalarType[type].toLowerCase();\n    return [\n        wireType,\n        method,\n        isUndefined || isIntrinsicDefault\n    ];\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unnecessary-condition, no-case-declarations, prefer-const */ const unknownFieldsSymbol = Symbol(\"@bufbuild/protobuf/unknown-fields\");\n// Default options for parsing binary data.\nconst readDefaults = {\n    readUnknownFields: true,\n    readerFactory: (bytes)=>new BinaryReader(bytes)\n};\n// Default options for serializing binary data.\nconst writeDefaults = {\n    writeUnknownFields: true,\n    writerFactory: ()=>new BinaryWriter()\n};\nfunction makeReadOptions$1(options) {\n    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;\n}\nfunction makeWriteOptions$1(options) {\n    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;\n}\nfunction makeBinaryFormatCommon() {\n    return {\n        makeReadOptions: makeReadOptions$1,\n        makeWriteOptions: makeWriteOptions$1,\n        listUnknownFields (message) {\n            var _a;\n            return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];\n        },\n        discardUnknownFields (message) {\n            delete message[unknownFieldsSymbol];\n        },\n        writeUnknownFields (message, writer) {\n            const m = message;\n            const c = m[unknownFieldsSymbol];\n            if (c) {\n                for (const f of c){\n                    writer.tag(f.no, f.wireType).raw(f.data);\n                }\n            }\n        },\n        onUnknownField (message, no, wireType, data) {\n            const m = message;\n            if (!Array.isArray(m[unknownFieldsSymbol])) {\n                m[unknownFieldsSymbol] = [];\n            }\n            m[unknownFieldsSymbol].push({\n                no,\n                wireType,\n                data\n            });\n        },\n        readMessage (message, reader, length, options) {\n            const type = message.getType();\n            const end = length === undefined ? reader.len : reader.pos + length;\n            while(reader.pos < end){\n                const [fieldNo, wireType] = reader.tag(), field = type.fields.find(fieldNo);\n                if (!field) {\n                    const data = reader.skip(wireType);\n                    if (options.readUnknownFields) {\n                        this.onUnknownField(message, fieldNo, wireType, data);\n                    }\n                    continue;\n                }\n                let target = message, repeated = field.repeated, localName = field.localName;\n                if (field.oneof) {\n                    target = target[field.oneof.localName];\n                    if (target.case != localName) {\n                        delete target.value;\n                    }\n                    target.case = localName;\n                    localName = \"value\";\n                }\n                switch(field.kind){\n                    case \"scalar\":\n                    case \"enum\":\n                        const scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                        let read = readScalar$1;\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n                        if (field.kind == \"scalar\" && field.L > 0) {\n                            read = readScalarLTString;\n                        }\n                        if (repeated) {\n                            let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                            if (wireType == WireType.LengthDelimited && scalarType != ScalarType.STRING && scalarType != ScalarType.BYTES) {\n                                let e = reader.uint32() + reader.pos;\n                                while(reader.pos < e){\n                                    arr.push(read(reader, scalarType));\n                                }\n                            } else {\n                                arr.push(read(reader, scalarType));\n                            }\n                        } else {\n                            target[localName] = read(reader, scalarType);\n                        }\n                        break;\n                    case \"message\":\n                        const messageType = field.T;\n                        if (repeated) {\n                            // safe to assume presence of array, oneof cannot contain repeated values\n                            target[localName].push(readMessageField(reader, new messageType(), options));\n                        } else {\n                            if (target[localName] instanceof Message) {\n                                readMessageField(reader, target[localName], options);\n                            } else {\n                                target[localName] = readMessageField(reader, new messageType(), options);\n                                if (messageType.fieldWrapper && !field.oneof && !field.repeated) {\n                                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                                }\n                            }\n                        }\n                        break;\n                    case \"map\":\n                        let [mapKey, mapVal] = readMapEntry(field, reader, options);\n                        // safe to assume presence of map object, oneof cannot contain repeated values\n                        target[localName][mapKey] = mapVal;\n                        break;\n                }\n            }\n        }\n    };\n}\n// Read a message, avoiding MessageType.fromBinary() to re-use the\n// BinaryReadOptions and the IBinaryReader.\nfunction readMessageField(reader, message, options) {\n    const format = message.getType().runtime.bin;\n    format.readMessage(message, reader, reader.uint32(), options);\n    return message;\n}\n// Read a map field, expecting key field = 1, value field = 2\nfunction readMapEntry(field, reader, options) {\n    const length = reader.uint32(), end = reader.pos + length;\n    let key, val;\n    while(reader.pos < end){\n        let [fieldNo] = reader.tag();\n        switch(fieldNo){\n            case 1:\n                key = readScalar$1(reader, field.K);\n                break;\n            case 2:\n                switch(field.V.kind){\n                    case \"scalar\":\n                        val = readScalar$1(reader, field.V.T);\n                        break;\n                    case \"enum\":\n                        val = reader.int32();\n                        break;\n                    case \"message\":\n                        val = readMessageField(reader, new field.V.T(), options);\n                        break;\n                }\n                break;\n        }\n    }\n    if (key === undefined) {\n        let keyRaw = scalarDefaultValue(field.K, LongType.BIGINT);\n        key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;\n    }\n    if (typeof key != \"string\" && typeof key != \"number\") {\n        key = key.toString();\n    }\n    if (val === undefined) {\n        switch(field.V.kind){\n            case \"scalar\":\n                val = scalarDefaultValue(field.V.T, LongType.BIGINT);\n                break;\n            case \"enum\":\n                val = 0;\n                break;\n            case \"message\":\n                val = new field.V.T();\n                break;\n        }\n    }\n    return [\n        key,\n        val\n    ];\n}\n// Read a scalar value, but return 64 bit integral types (int64, uint64,\n// sint64, fixed64, sfixed64) as string instead of bigint.\nfunction readScalarLTString(reader, type) {\n    const v = readScalar$1(reader, type);\n    return typeof v == \"bigint\" ? v.toString() : v;\n}\n// Does not use scalarTypeInfo() for better performance.\nfunction readScalar$1(reader, type) {\n    switch(type){\n        case ScalarType.STRING:\n            return reader.string();\n        case ScalarType.BOOL:\n            return reader.bool();\n        case ScalarType.DOUBLE:\n            return reader.double();\n        case ScalarType.FLOAT:\n            return reader.float();\n        case ScalarType.INT32:\n            return reader.int32();\n        case ScalarType.INT64:\n            return reader.int64();\n        case ScalarType.UINT64:\n            return reader.uint64();\n        case ScalarType.FIXED64:\n            return reader.fixed64();\n        case ScalarType.BYTES:\n            return reader.bytes();\n        case ScalarType.FIXED32:\n            return reader.fixed32();\n        case ScalarType.SFIXED32:\n            return reader.sfixed32();\n        case ScalarType.SFIXED64:\n            return reader.sfixed64();\n        case ScalarType.SINT64:\n            return reader.sint64();\n        case ScalarType.UINT32:\n            return reader.uint32();\n        case ScalarType.SINT32:\n            return reader.sint32();\n    }\n}\nfunction writeMapEntry(writer, options, field, key, value) {\n    writer.tag(field.no, WireType.LengthDelimited);\n    writer.fork();\n    // javascript only allows number or string for object properties\n    // we convert from our representation to the protobuf type\n    let keyValue = key;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys\n    switch(field.K){\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n            keyValue = Number.parseInt(key);\n            break;\n        case ScalarType.BOOL:\n            assert(key == \"true\" || key == \"false\");\n            keyValue = key == \"true\";\n            break;\n    }\n    // write key, expecting key field number = 1\n    writeScalar$1(writer, field.K, 1, keyValue, true);\n    // write value, expecting value field number = 2\n    switch(field.V.kind){\n        case \"scalar\":\n            writeScalar$1(writer, field.V.T, 2, value, true);\n            break;\n        case \"enum\":\n            writeScalar$1(writer, ScalarType.INT32, 2, value, true);\n            break;\n        case \"message\":\n            writeMessageField(writer, options, field.V.T, 2, value);\n            break;\n    }\n    writer.join();\n}\nfunction writeMessageField(writer, options, type, fieldNo, value) {\n    if (value !== undefined) {\n        const message = wrapField(type, value);\n        writer.tag(fieldNo, WireType.LengthDelimited).bytes(message.toBinary(options));\n    }\n}\nfunction writeScalar$1(writer, type, fieldNo, value, emitIntrinsicDefault) {\n    let [wireType, method, isIntrinsicDefault] = scalarTypeInfo(type, value);\n    if (!isIntrinsicDefault || emitIntrinsicDefault) {\n        writer.tag(fieldNo, wireType)[method](value);\n    }\n}\nfunction writePacked(writer, type, fieldNo, value) {\n    if (!value.length) {\n        return;\n    }\n    writer.tag(fieldNo, WireType.LengthDelimited).fork();\n    let [, method] = scalarTypeInfo(type);\n    for(let i = 0; i < value.length; i++){\n        writer[method](value[i]);\n    }\n    writer.join();\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions, prefer-const, no-case-declarations */ function makeBinaryFormatProto3() {\n    return Object.assign(Object.assign({}, makeBinaryFormatCommon()), {\n        writeMessage (message, writer, options) {\n            const type = message.getType();\n            for (const field of type.fields.byNumber()){\n                let value, repeated = field.repeated, localName = field.localName;\n                if (field.oneof) {\n                    const oneof = message[field.oneof.localName];\n                    if (oneof.case !== localName) {\n                        continue; // field is not selected, skip\n                    }\n                    value = oneof.value;\n                } else {\n                    value = message[localName];\n                }\n                switch(field.kind){\n                    case \"scalar\":\n                    case \"enum\":\n                        let scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                        if (repeated) {\n                            if (field.packed) {\n                                writePacked(writer, scalarType, field.no, value);\n                            } else {\n                                for (const item of value){\n                                    writeScalar$1(writer, scalarType, field.no, item, true);\n                                }\n                            }\n                        } else {\n                            if (value !== undefined) {\n                                writeScalar$1(writer, scalarType, field.no, value, !!field.oneof || field.opt);\n                            }\n                        }\n                        break;\n                    case \"message\":\n                        if (repeated) {\n                            for (const item of value){\n                                writeMessageField(writer, options, field.T, field.no, item);\n                            }\n                        } else {\n                            writeMessageField(writer, options, field.T, field.no, value);\n                        }\n                        break;\n                    case \"map\":\n                        for (const [key, val] of Object.entries(value)){\n                            writeMapEntry(writer, options, field, key, val);\n                        }\n                        break;\n                }\n            }\n            if (options.writeUnknownFields) {\n                this.writeUnknownFields(message, writer);\n            }\n            return writer;\n        }\n    });\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */ // lookup table from base64 character to byte\nlet encTable = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor(let i = 0; i < encTable.length; i++)decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\nconst protoBase64 = {\n    /**\n     * Decodes a base64 string to a byte array.\n     *\n     * - ignores white-space, including line breaks and tabs\n     * - allows inner padding (can decode concatenated base64 strings)\n     * - does not require padding\n     * - understands base64url encoding:\n     *   \"-\" instead of \"+\",\n     *   \"_\" instead of \"/\",\n     *   no padding\n     */ dec (base64Str) {\n        // estimate byte size, not accounting for inner padding and whitespace\n        let es = base64Str.length * 3 / 4;\n        if (base64Str[base64Str.length - 2] == \"=\") es -= 2;\n        else if (base64Str[base64Str.length - 1] == \"=\") es -= 1;\n        let bytes = new Uint8Array(es), bytePos = 0, groupPos = 0, b, p = 0; // previous byte\n        for(let i = 0; i < base64Str.length; i++){\n            b = decTable[base64Str.charCodeAt(i)];\n            if (b === undefined) {\n                switch(base64Str[i]){\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"=\":\n                        groupPos = 0; // reset state when padding found\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"\\n\":\n                    case \"\\r\":\n                    case \"\\t\":\n                    case \" \":\n                        continue; // skip white-space, and padding\n                    default:\n                        throw Error(\"invalid base64 string.\");\n                }\n            }\n            switch(groupPos){\n                case 0:\n                    p = b;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    bytes[bytePos++] = p << 2 | (b & 48) >> 4;\n                    p = b;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\n                    p = b;\n                    groupPos = 3;\n                    break;\n                case 3:\n                    bytes[bytePos++] = (p & 3) << 6 | b;\n                    groupPos = 0;\n                    break;\n            }\n        }\n        if (groupPos == 1) throw Error(\"invalid base64 string.\");\n        return bytes.subarray(0, bytePos);\n    },\n    /**\n     * Encode a byte array to a base64 string.\n     */ enc (bytes) {\n        let base64 = \"\", groupPos = 0, b, p = 0; // carry over from previous byte\n        for(let i = 0; i < bytes.length; i++){\n            b = bytes[i];\n            switch(groupPos){\n                case 0:\n                    base64 += encTable[b >> 2];\n                    p = (b & 3) << 4;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    base64 += encTable[p | b >> 4];\n                    p = (b & 15) << 2;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    base64 += encTable[p | b >> 6];\n                    base64 += encTable[b & 63];\n                    groupPos = 0;\n                    break;\n            }\n        }\n        // add output padding\n        if (groupPos) {\n            base64 += encTable[p];\n            base64 += \"=\";\n            if (groupPos == 1) base64 += \"=\";\n        }\n        return base64;\n    }\n};\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */ // Default options for parsing JSON.\nconst jsonReadDefaults = {\n    ignoreUnknownFields: false\n};\n// Default options for serializing to JSON.\nconst jsonWriteDefaults = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;\n}\nfunction makeJsonFormatCommon(makeWriteField) {\n    const writeField = makeWriteField(writeEnum, writeScalar);\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        readMessage (type, json, options, message) {\n            if (json == null || Array.isArray(json) || typeof json != \"object\") {\n                throw new Error(`cannot decode message ${type.typeName} from JSON: ${this.debug(json)}`);\n            }\n            message = message !== null && message !== void 0 ? message : new type();\n            const oneofSeen = {};\n            for (const [jsonKey, jsonValue] of Object.entries(json)){\n                const field = type.fields.findJsonName(jsonKey);\n                if (!field) {\n                    if (!options.ignoreUnknownFields) {\n                        throw new Error(`cannot decode message ${type.typeName} from JSON: key \"${jsonKey}\" is unknown`);\n                    }\n                    continue;\n                }\n                let localName = field.localName;\n                let target = message;\n                if (field.oneof) {\n                    if (jsonValue === null && field.kind == \"scalar\") {\n                        continue;\n                    }\n                    const seen = oneofSeen[field.oneof.localName];\n                    if (seen) {\n                        throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof \"${field.oneof.name}\" present: \"${seen}\", \"${jsonKey}\"`);\n                    }\n                    oneofSeen[field.oneof.localName] = jsonKey;\n                    target = target[field.oneof.localName] = {\n                        case: localName\n                    };\n                    localName = \"value\";\n                }\n                if (field.repeated) {\n                    if (jsonValue === null) {\n                        continue;\n                    }\n                    if (!Array.isArray(jsonValue)) {\n                        throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);\n                    }\n                    const targetArray = target[localName];\n                    for (const jsonItem of jsonValue){\n                        if (jsonItem === null) {\n                            throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`);\n                        }\n                        let val;\n                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- \"map\" is invalid for repeated fields\n                        switch(field.kind){\n                            case \"message\":\n                                val = field.T.fromJson(jsonItem, options);\n                                break;\n                            case \"enum\":\n                                val = readEnum(field.T, jsonItem, options.ignoreUnknownFields);\n                                if (val === undefined) continue;\n                                break;\n                            case \"scalar\":\n                                try {\n                                    val = readScalar(field.T, jsonItem, field.L);\n                                } catch (e) {\n                                    let m = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`;\n                                    if (e instanceof Error && e.message.length > 0) {\n                                        m += `: ${e.message}`;\n                                    }\n                                    throw new Error(m);\n                                }\n                                break;\n                        }\n                        targetArray.push(val);\n                    }\n                } else if (field.kind == \"map\") {\n                    if (jsonValue === null) {\n                        continue;\n                    }\n                    if (Array.isArray(jsonValue) || typeof jsonValue != \"object\") {\n                        throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);\n                    }\n                    const targetMap = target[localName];\n                    for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)){\n                        if (jsonMapValue === null) {\n                            throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: map value null`);\n                        }\n                        let val;\n                        switch(field.V.kind){\n                            case \"message\":\n                                val = field.V.T.fromJson(jsonMapValue, options);\n                                break;\n                            case \"enum\":\n                                val = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields);\n                                if (val === undefined) continue;\n                                break;\n                            case \"scalar\":\n                                try {\n                                    val = readScalar(field.V.T, jsonMapValue, LongType.BIGINT);\n                                } catch (e) {\n                                    let m = `cannot decode map value for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;\n                                    if (e instanceof Error && e.message.length > 0) {\n                                        m += `: ${e.message}`;\n                                    }\n                                    throw new Error(m);\n                                }\n                                break;\n                        }\n                        try {\n                            targetMap[readScalar(field.K, field.K == ScalarType.BOOL ? jsonMapKey == \"true\" ? true : jsonMapKey == \"false\" ? false : jsonMapKey : jsonMapKey, LongType.BIGINT).toString()] = val;\n                        } catch (e) {\n                            let m = `cannot decode map key for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;\n                            if (e instanceof Error && e.message.length > 0) {\n                                m += `: ${e.message}`;\n                            }\n                            throw new Error(m);\n                        }\n                    }\n                } else {\n                    switch(field.kind){\n                        case \"message\":\n                            const messageType = field.T;\n                            if (jsonValue === null && messageType.typeName != \"google.protobuf.Value\") {\n                                if (field.oneof) {\n                                    throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: null is invalid for oneof field \"${jsonKey}\"`);\n                                }\n                                continue;\n                            }\n                            if (target[localName] instanceof Message) {\n                                target[localName].fromJson(jsonValue, options);\n                            } else {\n                                target[localName] = messageType.fromJson(jsonValue, options);\n                                if (messageType.fieldWrapper && !field.oneof) {\n                                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                                }\n                            }\n                            break;\n                        case \"enum\":\n                            const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields);\n                            if (enumValue !== undefined) {\n                                target[localName] = enumValue;\n                            }\n                            break;\n                        case \"scalar\":\n                            try {\n                                target[localName] = readScalar(field.T, jsonValue, field.L);\n                            } catch (e) {\n                                let m = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;\n                                if (e instanceof Error && e.message.length > 0) {\n                                    m += `: ${e.message}`;\n                                }\n                                throw new Error(m);\n                            }\n                            break;\n                    }\n                }\n            }\n            return message;\n        },\n        writeMessage (message, options) {\n            const type = message.getType();\n            const json = {};\n            let field;\n            try {\n                for (const member of type.fields.byMember()){\n                    let jsonValue;\n                    if (member.kind == \"oneof\") {\n                        const oneof = message[member.localName];\n                        if (oneof.value === undefined) {\n                            continue;\n                        }\n                        field = member.findField(oneof.case);\n                        if (!field) {\n                            throw \"oneof case not found: \" + oneof.case;\n                        }\n                        jsonValue = writeField(field, oneof.value, options);\n                    } else {\n                        field = member;\n                        jsonValue = writeField(field, message[field.localName], options);\n                    }\n                    if (jsonValue !== undefined) {\n                        json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n                    }\n                }\n            } catch (e) {\n                const m = field ? `cannot encode field ${type.typeName}.${field.name} to JSON` : `cannot encode message ${type.typeName} to JSON`;\n                const r = e instanceof Error ? e.message : String(e);\n                throw new Error(m + (r.length > 0 ? `: ${r}` : \"\"));\n            }\n            return json;\n        },\n        readScalar,\n        writeScalar,\n        debug: debugJsonValue\n    };\n}\nfunction debugJsonValue(json) {\n    if (json === null) {\n        return \"null\";\n    }\n    switch(typeof json){\n        case \"object\":\n            return Array.isArray(json) ? \"array\" : \"object\";\n        case \"string\":\n            return json.length > 100 ? \"string\" : `\"${json.split('\"').join('\\\\\"')}\"`;\n        default:\n            return String(json);\n    }\n}\n// May throw an error. If the error message is non-blank, it should be shown.\n// It is up to the caller to provide context.\nfunction readScalar(type, json, longType) {\n    // every valid case in the switch below returns, and every fall\n    // through is regarded as a failure.\n    switch(type){\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            if (json === null) return 0.0;\n            if (json === \"NaN\") return Number.NaN;\n            if (json === \"Infinity\") return Number.POSITIVE_INFINITY;\n            if (json === \"-Infinity\") return Number.NEGATIVE_INFINITY;\n            if (json === \"\") {\n                break;\n            }\n            if (typeof json == \"string\" && json.trim().length !== json.length) {\n                break;\n            }\n            if (typeof json != \"string\" && typeof json != \"number\") {\n                break;\n            }\n            const float = Number(json);\n            if (Number.isNaN(float)) {\n                break;\n            }\n            if (!Number.isFinite(float)) {\n                break;\n            }\n            if (type == ScalarType.FLOAT) assertFloat32(float);\n            return float;\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.UINT32:\n            if (json === null) return 0;\n            let int32;\n            if (typeof json == \"number\") int32 = json;\n            else if (typeof json == \"string\" && json.length > 0) {\n                if (json.trim().length === json.length) int32 = Number(json);\n            }\n            if (int32 === undefined) break;\n            if (type == ScalarType.UINT32) assertUInt32(int32);\n            else assertInt32(int32);\n            return int32;\n        // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            if (json === null) return protoInt64.zero;\n            if (typeof json != \"number\" && typeof json != \"string\") break;\n            const long = protoInt64.parse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? long.toString() : long;\n        case ScalarType.FIXED64:\n        case ScalarType.UINT64:\n            if (json === null) return protoInt64.zero;\n            if (typeof json != \"number\" && typeof json != \"string\") break;\n            const uLong = protoInt64.uParse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? uLong.toString() : uLong;\n        // bool:\n        case ScalarType.BOOL:\n            if (json === null) return false;\n            if (typeof json !== \"boolean\") break;\n            return json;\n        // string:\n        case ScalarType.STRING:\n            if (json === null) return \"\";\n            if (typeof json !== \"string\") {\n                break;\n            }\n            // A string must always contain UTF-8 encoded or 7-bit ASCII.\n            // We validate with encodeURIComponent, which appears to be the fastest widely available option.\n            try {\n                encodeURIComponent(json);\n            } catch (e) {\n                throw new Error(\"invalid UTF8\");\n            }\n            return json;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            if (json === null || json === \"\") return new Uint8Array(0);\n            if (typeof json !== \"string\") break;\n            return protoBase64.dec(json);\n    }\n    throw new Error();\n}\nfunction readEnum(type, json, ignoreUnknownFields) {\n    if (json === null) {\n        // proto3 requires 0 to be default value for all enums\n        return 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch(typeof json){\n        case \"number\":\n            if (Number.isInteger(json)) {\n                return json;\n            }\n            break;\n        case \"string\":\n            const value = type.findName(json);\n            // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n            if (value || ignoreUnknownFields) {\n                return value === null || value === void 0 ? void 0 : value.no;\n            }\n            break;\n    }\n    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json)}`);\n}\nfunction writeEnum(type, value, emitIntrinsicDefault, enumAsInteger) {\n    var _a;\n    if (value === undefined) {\n        return value;\n    }\n    if (value === 0 && !emitIntrinsicDefault) {\n        // proto3 requires 0 to be default value for all enums\n        return undefined;\n    }\n    if (enumAsInteger) {\n        return value;\n    }\n    if (type.typeName == \"google.protobuf.NullValue\") {\n        return null;\n    }\n    const val = type.findNumber(value);\n    return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number\n}\nfunction writeScalar(type, value, emitIntrinsicDefault) {\n    if (value === undefined) {\n        return undefined;\n    }\n    switch(type){\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n            assert(typeof value == \"number\");\n            return value != 0 || emitIntrinsicDefault ? value : undefined;\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.FLOAT:\n        // assertFloat32(value);\n        case ScalarType.DOUBLE:\n            assert(typeof value == \"number\");\n            if (Number.isNaN(value)) return \"NaN\";\n            if (value === Number.POSITIVE_INFINITY) return \"Infinity\";\n            if (value === Number.NEGATIVE_INFINITY) return \"-Infinity\";\n            return value !== 0 || emitIntrinsicDefault ? value : undefined;\n        // string:\n        case ScalarType.STRING:\n            assert(typeof value == \"string\");\n            return value.length > 0 || emitIntrinsicDefault ? value : undefined;\n        // bool:\n        case ScalarType.BOOL:\n            assert(typeof value == \"boolean\");\n            return value || emitIntrinsicDefault ? value : undefined;\n        // JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            assert(typeof value == \"bigint\" || typeof value == \"string\" || typeof value == \"number\");\n            // We use implicit conversion with `value != 0` to catch both 0n and \"0\"\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            return emitIntrinsicDefault || value != 0 ? value.toString(10) : undefined;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            assert(value instanceof Uint8Array);\n            return emitIntrinsicDefault || value.byteLength > 0 ? protoBase64.enc(value) : undefined;\n    }\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */ function makeJsonFormatProto3() {\n    return makeJsonFormatCommon((writeEnum, writeScalar)=>{\n        return function writeField(field, value, options) {\n            if (field.kind == \"map\") {\n                const jsonObj = {};\n                switch(field.V.kind){\n                    case \"scalar\":\n                        for (const [entryKey, entryValue] of Object.entries(value)){\n                            const val = writeScalar(field.V.T, entryValue, true);\n                            assert(val !== undefined);\n                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                        }\n                        break;\n                    case \"message\":\n                        for (const [entryKey, entryValue] of Object.entries(value)){\n                            // JSON standard allows only (double quoted) string as property key\n                            jsonObj[entryKey.toString()] = entryValue.toJson(options);\n                        }\n                        break;\n                    case \"enum\":\n                        const enumType = field.V.T;\n                        for (const [entryKey, entryValue] of Object.entries(value)){\n                            assert(entryValue === undefined || typeof entryValue == \"number\");\n                            const val = writeEnum(enumType, entryValue, true, options.enumAsInteger);\n                            assert(val !== undefined);\n                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                        }\n                        break;\n                }\n                return options.emitDefaultValues || Object.keys(jsonObj).length > 0 ? jsonObj : undefined;\n            } else if (field.repeated) {\n                const jsonArr = [];\n                switch(field.kind){\n                    case \"scalar\":\n                        for(let i = 0; i < value.length; i++){\n                            jsonArr.push(writeScalar(field.T, value[i], true));\n                        }\n                        break;\n                    case \"enum\":\n                        for(let i = 0; i < value.length; i++){\n                            jsonArr.push(writeEnum(field.T, value[i], true, options.enumAsInteger));\n                        }\n                        break;\n                    case \"message\":\n                        for(let i = 0; i < value.length; i++){\n                            jsonArr.push(wrapField(field.T, value[i]).toJson(options));\n                        }\n                        break;\n                }\n                return options.emitDefaultValues || jsonArr.length > 0 ? jsonArr : undefined;\n            } else {\n                switch(field.kind){\n                    case \"scalar\":\n                        return writeScalar(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues);\n                    case \"enum\":\n                        return writeEnum(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues, options.enumAsInteger);\n                    case \"message\":\n                        return value !== undefined ? wrapField(field.T, value).toJson(options) : undefined;\n                }\n            }\n        };\n    });\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */ function makeUtilCommon() {\n    return {\n        setEnumType,\n        initPartial (source, target) {\n            if (source === undefined) {\n                return;\n            }\n            const type = target.getType();\n            for (const member of type.fields.byMember()){\n                const localName = member.localName, t = target, s = source;\n                if (s[localName] === undefined) {\n                    continue;\n                }\n                switch(member.kind){\n                    case \"oneof\":\n                        const sk = s[localName].case;\n                        if (sk === undefined) {\n                            continue;\n                        }\n                        const sourceField = member.findField(sk);\n                        let val = s[localName].value;\n                        if (sourceField && sourceField.kind == \"message\" && !(val instanceof sourceField.T)) {\n                            val = new sourceField.T(val);\n                        } else if (sourceField && sourceField.kind === \"scalar\" && sourceField.T === ScalarType.BYTES) {\n                            val = toU8Arr(val);\n                        }\n                        t[localName] = {\n                            case: sk,\n                            value: val\n                        };\n                        break;\n                    case \"scalar\":\n                    case \"enum\":\n                        let copy = s[localName];\n                        if (member.T === ScalarType.BYTES) {\n                            copy = member.repeated ? copy.map(toU8Arr) : toU8Arr(copy);\n                        }\n                        t[localName] = copy;\n                        break;\n                    case \"map\":\n                        switch(member.V.kind){\n                            case \"scalar\":\n                            case \"enum\":\n                                if (member.V.T === ScalarType.BYTES) {\n                                    for (const [k, v] of Object.entries(s[localName])){\n                                        t[localName][k] = toU8Arr(v);\n                                    }\n                                } else {\n                                    Object.assign(t[localName], s[localName]);\n                                }\n                                break;\n                            case \"message\":\n                                const messageType = member.V.T;\n                                for (const k of Object.keys(s[localName])){\n                                    let val = s[localName][k];\n                                    if (!messageType.fieldWrapper) {\n                                        // We only take partial input for messages that are not a wrapper type.\n                                        // For those messages, we recursively normalize the partial input.\n                                        val = new messageType(val);\n                                    }\n                                    t[localName][k] = val;\n                                }\n                                break;\n                        }\n                        break;\n                    case \"message\":\n                        const mt = member.T;\n                        if (member.repeated) {\n                            t[localName] = s[localName].map((val)=>val instanceof mt ? val : new mt(val));\n                        } else if (s[localName] !== undefined) {\n                            const val = s[localName];\n                            if (mt.fieldWrapper) {\n                                if (// We can't use BytesValue.typeName as that will create a circular import\n                                mt.typeName === \"google.protobuf.BytesValue\") {\n                                    t[localName] = toU8Arr(val);\n                                } else {\n                                    t[localName] = val;\n                                }\n                            } else {\n                                t[localName] = val instanceof mt ? val : new mt(val);\n                            }\n                        }\n                        break;\n                }\n            }\n        },\n        equals (type, a, b) {\n            if (a === b) {\n                return true;\n            }\n            if (!a || !b) {\n                return false;\n            }\n            return type.fields.byMember().every((m)=>{\n                const va = a[m.localName];\n                const vb = b[m.localName];\n                if (m.repeated) {\n                    if (va.length !== vb.length) {\n                        return false;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never \"map\"\n                    switch(m.kind){\n                        case \"message\":\n                            return va.every((a, i)=>m.T.equals(a, vb[i]));\n                        case \"scalar\":\n                            return va.every((a, i)=>scalarEquals(m.T, a, vb[i]));\n                        case \"enum\":\n                            return va.every((a, i)=>scalarEquals(ScalarType.INT32, a, vb[i]));\n                    }\n                    throw new Error(`repeated cannot contain ${m.kind}`);\n                }\n                switch(m.kind){\n                    case \"message\":\n                        return m.T.equals(va, vb);\n                    case \"enum\":\n                        return scalarEquals(ScalarType.INT32, va, vb);\n                    case \"scalar\":\n                        return scalarEquals(m.T, va, vb);\n                    case \"oneof\":\n                        if (va.case !== vb.case) {\n                            return false;\n                        }\n                        const s = m.findField(va.case);\n                        if (s === undefined) {\n                            return true;\n                        }\n                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never \"map\"\n                        switch(s.kind){\n                            case \"message\":\n                                return s.T.equals(va.value, vb.value);\n                            case \"enum\":\n                                return scalarEquals(ScalarType.INT32, va.value, vb.value);\n                            case \"scalar\":\n                                return scalarEquals(s.T, va.value, vb.value);\n                        }\n                        throw new Error(`oneof cannot contain ${s.kind}`);\n                    case \"map\":\n                        const keys = Object.keys(va).concat(Object.keys(vb));\n                        switch(m.V.kind){\n                            case \"message\":\n                                const messageType = m.V.T;\n                                return keys.every((k)=>messageType.equals(va[k], vb[k]));\n                            case \"enum\":\n                                return keys.every((k)=>scalarEquals(ScalarType.INT32, va[k], vb[k]));\n                            case \"scalar\":\n                                const scalarType = m.V.T;\n                                return keys.every((k)=>scalarEquals(scalarType, va[k], vb[k]));\n                        }\n                        break;\n                }\n            });\n        },\n        clone (message) {\n            const type = message.getType(), target = new type(), any = target;\n            for (const member of type.fields.byMember()){\n                const source = message[member.localName];\n                let copy;\n                if (member.repeated) {\n                    copy = source.map(cloneSingularField);\n                } else if (member.kind == \"map\") {\n                    copy = any[member.localName];\n                    for (const [key, v] of Object.entries(source)){\n                        copy[key] = cloneSingularField(v);\n                    }\n                } else if (member.kind == \"oneof\") {\n                    const f = member.findField(source.case);\n                    copy = f ? {\n                        case: source.case,\n                        value: cloneSingularField(source.value)\n                    } : {\n                        case: undefined\n                    };\n                } else {\n                    copy = cloneSingularField(source);\n                }\n                any[member.localName] = copy;\n            }\n            return target;\n        }\n    };\n}\n// clone a single field value - i.e. the element type of repeated fields, the value type of maps\nfunction cloneSingularField(value) {\n    if (value === undefined) {\n        return value;\n    }\n    if (value instanceof Message) {\n        return value.clone();\n    }\n    if (value instanceof Uint8Array) {\n        const c = new Uint8Array(value.byteLength);\n        c.set(value);\n        return c;\n    }\n    return value;\n}\n// converts any ArrayLike<number> to Uint8Array if necessary.\nfunction toU8Arr(input) {\n    return input instanceof Uint8Array ? input : new Uint8Array(input);\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nclass InternalFieldList {\n    constructor(fields, normalizer){\n        this._fields = fields;\n        this._normalizer = normalizer;\n    }\n    findJsonName(jsonName) {\n        if (!this.jsonNames) {\n            const t = {};\n            for (const f of this.list()){\n                t[f.jsonName] = t[f.name] = f;\n            }\n            this.jsonNames = t;\n        }\n        return this.jsonNames[jsonName];\n    }\n    find(fieldNo) {\n        if (!this.numbers) {\n            const t = {};\n            for (const f of this.list()){\n                t[f.no] = f;\n            }\n            this.numbers = t;\n        }\n        return this.numbers[fieldNo];\n    }\n    list() {\n        if (!this.all) {\n            this.all = this._normalizer(this._fields);\n        }\n        return this.all;\n    }\n    byNumber() {\n        if (!this.numbersAsc) {\n            this.numbersAsc = this.list().concat().sort((a, b)=>a.no - b.no);\n        }\n        return this.numbersAsc;\n    }\n    byMember() {\n        if (!this.members) {\n            this.members = [];\n            const a = this.members;\n            let o;\n            for (const f of this.list()){\n                if (f.oneof) {\n                    if (f.oneof !== o) {\n                        o = f.oneof;\n                        a.push(o);\n                    }\n                } else {\n                    a.push(f);\n                }\n            }\n        }\n        return this.members;\n    }\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Returns the name of a protobuf element in generated code.\n *\n * Field names - including oneofs - are converted to lowerCamelCase. For\n * messages, enumerations and services, the package name is stripped from\n * the type name. For nested messages and enumerations, the names are joined\n * with an underscore. For methods, the first character is made lowercase.\n */ /**\n * Returns the name of a field in generated code.\n */ function localFieldName(protoName, inOneof) {\n    const name = protoCamelCase(protoName);\n    if (inOneof) {\n        // oneof member names are not properties, but values of the `case` property.\n        return name;\n    }\n    return safeObjectProperty(safeMessageProperty(name));\n}\n/**\n * Returns the name of a oneof group in generated code.\n */ function localOneofName(protoName) {\n    return localFieldName(protoName, false);\n}\n/**\n * Returns the JSON name for a protobuf field, exactly like protoc does.\n */ const fieldJsonName = protoCamelCase;\n/**\n * Converts snake_case to protoCamelCase according to the convention\n * used by protoc to convert a field name to a JSON name.\n */ function protoCamelCase(snakeCase) {\n    let capNext = false;\n    const b = [];\n    for(let i = 0; i < snakeCase.length; i++){\n        let c = snakeCase.charAt(i);\n        switch(c){\n            case \"_\":\n                capNext = true;\n                break;\n            case \"0\":\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                b.push(c);\n                capNext = false;\n                break;\n            default:\n                if (capNext) {\n                    capNext = false;\n                    c = c.toUpperCase();\n                }\n                b.push(c);\n                break;\n        }\n    }\n    return b.join(\"\");\n}\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */ const reservedObjectProperties = new Set([\n    // names reserved by JavaScript\n    \"constructor\",\n    \"toString\",\n    \"toJSON\",\n    \"valueOf\"\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by the runtime.\n */ const reservedMessageProperties = new Set([\n    // names reserved by the runtime\n    \"getType\",\n    \"clone\",\n    \"equals\",\n    \"fromBinary\",\n    \"fromJson\",\n    \"fromJsonString\",\n    \"toBinary\",\n    \"toJson\",\n    \"toJsonString\",\n    // names reserved by the runtime for the future\n    \"toObject\"\n]);\nconst fallback = (name)=>`${name}$`;\n/**\n * Will wrap names that are Object prototype properties or names reserved\n * for `Message`s.\n */ const safeMessageProperty = (name)=>{\n    if (reservedMessageProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */ const safeObjectProperty = (name)=>{\n    if (reservedObjectProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nclass InternalOneofInfo {\n    constructor(name){\n        this.kind = \"oneof\";\n        this.repeated = false;\n        this.packed = false;\n        this.opt = false;\n        this.default = undefined;\n        this.fields = [];\n        this.name = name;\n        this.localName = localOneofName(name);\n    }\n    addField(field) {\n        assert(field.oneof === this, `field ${field.name} not one of ${this.name}`);\n        this.fields.push(field);\n    }\n    findField(localName) {\n        if (!this._lookup) {\n            this._lookup = Object.create(null);\n            for(let i = 0; i < this.fields.length; i++){\n                this._lookup[this.fields[i].localName] = this.fields[i];\n            }\n        }\n        return this._lookup[localName];\n    }\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Provides functionality for messages defined with the proto3 syntax.\n */ const proto3 = makeProtoRuntime(\"proto3\", makeJsonFormatProto3(), makeBinaryFormatProto3(), Object.assign(Object.assign({}, makeUtilCommon()), {\n    newFieldList (fields) {\n        return new InternalFieldList(fields, normalizeFieldInfosProto3);\n    },\n    initFields (target) {\n        for (const member of target.getType().fields.byMember()){\n            if (member.opt) {\n                continue;\n            }\n            const name = member.localName, t = target;\n            if (member.repeated) {\n                t[name] = [];\n                continue;\n            }\n            switch(member.kind){\n                case \"oneof\":\n                    t[name] = {\n                        case: undefined\n                    };\n                    break;\n                case \"enum\":\n                    t[name] = 0;\n                    break;\n                case \"map\":\n                    t[name] = {};\n                    break;\n                case \"scalar\":\n                    t[name] = scalarDefaultValue(member.T, member.L); // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n                    break;\n            }\n        }\n    }\n}));\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */ function normalizeFieldInfosProto3(fieldInfos) {\n    var _a, _b, _c, _d;\n    const r = [];\n    let o;\n    for (const field of typeof fieldInfos == \"function\" ? fieldInfos() : fieldInfos){\n        const f = field;\n        f.localName = localFieldName(field.name, field.oneof !== undefined);\n        f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : fieldJsonName(field.name);\n        f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;\n        if (field.kind == \"scalar\") {\n            f.L = (_c = field.L) !== null && _c !== void 0 ? _c : LongType.BIGINT;\n        }\n        // From the proto3 language guide:\n        // > In proto3, repeated fields of scalar numeric types are packed by default.\n        // This information is incomplete - according to the conformance tests, BOOL\n        // and ENUM are packed by default as well. This means only STRING and BYTES\n        // are not packed by default, which makes sense because they are length-delimited.\n        f.packed = (_d = field.packed) !== null && _d !== void 0 ? _d : field.kind == \"enum\" || field.kind == \"scalar\" && field.T != ScalarType.BYTES && field.T != ScalarType.STRING;\n        // We do not surface options at this time\n        // f.options = field.options ?? emptyReadonlyObject;\n        if (field.oneof !== undefined) {\n            const ooname = typeof field.oneof == \"string\" ? field.oneof : field.oneof.name;\n            if (!o || o.name != ooname) {\n                o = new InternalOneofInfo(ooname);\n            }\n            f.oneof = o;\n            o.addField(f);\n        }\n        r.push(f);\n    }\n    return r;\n}\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * MethodKind represents the four method types that can be declared in\n * protobuf with the `stream` keyword:\n *\n * 1. Unary:           rpc (Input) returns (Output)\n * 2. ServerStreaming: rpc (Input) returns (stream Output)\n * 3. ClientStreaming: rpc (stream Input) returns (Output)\n * 4. BiDiStreaming:   rpc (stream Input) returns (stream Output)\n */ var MethodKind;\n(function(MethodKind) {\n    MethodKind[MethodKind[\"Unary\"] = 0] = \"Unary\";\n    MethodKind[MethodKind[\"ServerStreaming\"] = 1] = \"ServerStreaming\";\n    MethodKind[MethodKind[\"ClientStreaming\"] = 2] = \"ClientStreaming\";\n    MethodKind[MethodKind[\"BiDiStreaming\"] = 3] = \"BiDiStreaming\";\n})(MethodKind || (MethodKind = {}));\n/**\n * Is this method side-effect-free (or safe in HTTP parlance), or just\n * idempotent, or neither? HTTP based RPC implementation may choose GET verb\n * for safe methods, and PUT verb for idempotent methods instead of the\n * default POST.\n *\n * This enum matches the protobuf enum google.protobuf.MethodOptions.IdempotencyLevel,\n * defined in the well-known type google/protobuf/descriptor.proto, but\n * drops UNKNOWN.\n */ var MethodIdempotency;\n(function(MethodIdempotency) {\n    /**\n     * Idempotent, no side effects.\n     */ MethodIdempotency[MethodIdempotency[\"NoSideEffects\"] = 1] = \"NoSideEffects\";\n    /**\n     * Idempotent, but may have side effects.\n     */ MethodIdempotency[MethodIdempotency[\"Idempotent\"] = 2] = \"Idempotent\";\n})(MethodIdempotency || (MethodIdempotency = {}));\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Connect represents categories of errors as codes, and each code maps to a\n * specific HTTP status code. The codes and their semantics were chosen to\n * match gRPC. Only the codes below are valid — there are no user-defined\n * codes.\n *\n * See the specification at https://connectrpc.com/docs/protocol#error-codes\n * for details.\n */ var Code;\n(function(Code) {\n    /**\n     * Canceled, usually be the user\n     */ Code[Code[\"Canceled\"] = 1] = \"Canceled\";\n    /**\n     * Unknown error\n     */ Code[Code[\"Unknown\"] = 2] = \"Unknown\";\n    /**\n     * Argument invalid regardless of system state\n     */ Code[Code[\"InvalidArgument\"] = 3] = \"InvalidArgument\";\n    /**\n     * Operation expired, may or may not have completed.\n     */ Code[Code[\"DeadlineExceeded\"] = 4] = \"DeadlineExceeded\";\n    /**\n     * Entity not found.\n     */ Code[Code[\"NotFound\"] = 5] = \"NotFound\";\n    /**\n     * Entity already exists.\n     */ Code[Code[\"AlreadyExists\"] = 6] = \"AlreadyExists\";\n    /**\n     * Operation not authorized.\n     */ Code[Code[\"PermissionDenied\"] = 7] = \"PermissionDenied\";\n    /**\n     * Quota exhausted.\n     */ Code[Code[\"ResourceExhausted\"] = 8] = \"ResourceExhausted\";\n    /**\n     * Argument invalid in current system state.\n     */ Code[Code[\"FailedPrecondition\"] = 9] = \"FailedPrecondition\";\n    /**\n     * Operation aborted.\n     */ Code[Code[\"Aborted\"] = 10] = \"Aborted\";\n    /**\n     * Out of bounds, use instead of FailedPrecondition.\n     */ Code[Code[\"OutOfRange\"] = 11] = \"OutOfRange\";\n    /**\n     * Operation not implemented or disabled.\n     */ Code[Code[\"Unimplemented\"] = 12] = \"Unimplemented\";\n    /**\n     * Internal error, reserved for \"serious errors\".\n     */ Code[Code[\"Internal\"] = 13] = \"Internal\";\n    /**\n     * Unavailable, client should back off and retry.\n     */ Code[Code[\"Unavailable\"] = 14] = \"Unavailable\";\n    /**\n     * Unrecoverable data loss or corruption.\n     */ Code[Code[\"DataLoss\"] = 15] = \"DataLoss\";\n    /**\n     * Request isn't authenticated.\n     */ Code[Code[\"Unauthenticated\"] = 16] = \"Unauthenticated\";\n})(Code || (Code = {}));\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * codeToString returns the string representation of a Code.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function codeToString(value) {\n    const name = Code[value];\n    if (typeof name != \"string\") {\n        return value.toString();\n    }\n    return name[0].toLowerCase() + name.substring(1).replace(/[A-Z]/g, (c)=>\"_\" + c.toLowerCase());\n}\nlet stringToCode;\n/**\n * codeFromString parses the string representation of a Code in snake_case.\n * For example, the string \"permission_denied\" parses into Code.PermissionDenied.\n *\n * If the given string cannot be parsed, the function returns undefined.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function codeFromString(value) {\n    if (!stringToCode) {\n        stringToCode = {};\n        for (const value of Object.values(Code)){\n            if (typeof value == \"string\") {\n                continue;\n            }\n            stringToCode[codeToString(value)] = value;\n        }\n    }\n    return stringToCode[value];\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * ConnectError captures four pieces of information: a Code, an error\n * message, an optional cause of the error, and an optional collection of\n * arbitrary Protobuf messages called  \"details\".\n *\n * Because developer tools typically show just the error message, we prefix\n * it with the status code, so that the most important information is always\n * visible immediately.\n *\n * Error details are wrapped with google.protobuf.Any on the wire, so that\n * a server or middleware can attach arbitrary data to an error. Use the\n * method findDetails() to retrieve the details.\n */ class ConnectError extends Error {\n    /**\n     * Create a new ConnectError.\n     * If no code is provided, code \"unknown\" is used.\n     * Outgoing details are only relevant for the server side - a service may\n     * raise an error with details, and it is up to the protocol implementation\n     * to encode and send the details along with error.\n     */ constructor(message, code = Code.Unknown, metadata, outgoingDetails, cause){\n        super(createMessage(message, code));\n        this.name = \"ConnectError\";\n        // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#example\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.rawMessage = message;\n        this.code = code;\n        this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});\n        this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];\n        this.cause = cause;\n    }\n    /**\n     * Convert any value - typically a caught error into a ConnectError,\n     * following these rules:\n     * - If the value is already a ConnectError, return it as is.\n     * - If the value is an AbortError from the fetch API, return the message\n     *   of the AbortError with code Canceled.\n     * - For other Errors, return the error message with code Unknown by default.\n     * - For other values, return the values String representation as a message,\n     *   with the code Unknown by default.\n     * The original value will be used for the \"cause\" property for the new\n     * ConnectError.\n     */ static from(reason, code = Code.Unknown) {\n        if (reason instanceof ConnectError) {\n            return reason;\n        }\n        if (reason instanceof Error) {\n            if (reason.name == \"AbortError\") {\n                // Fetch requests can only be canceled with an AbortController.\n                // We detect that condition by looking at the name of the raised\n                // error object, and translate to the appropriate status code.\n                return new ConnectError(reason.message, Code.Canceled);\n            }\n            return new ConnectError(reason.message, code, undefined, undefined, reason);\n        }\n        return new ConnectError(String(reason), code, undefined, undefined, reason);\n    }\n    findDetails(typeOrRegistry) {\n        const registry = \"typeName\" in typeOrRegistry ? {\n            findMessage: (typeName)=>typeName === typeOrRegistry.typeName ? typeOrRegistry : undefined\n        } : typeOrRegistry;\n        const details = [];\n        for (const data of this.details){\n            if (data instanceof Message) {\n                if (registry.findMessage(data.getType().typeName)) {\n                    details.push(data);\n                }\n                continue;\n            }\n            const type = registry.findMessage(data.type);\n            if (type) {\n                try {\n                    details.push(type.fromBinary(data.value));\n                } catch (_) {\n                // We silently give up if we are unable to parse the detail, because\n                // that appears to be the least worst behavior.\n                // It is very unlikely that a user surrounds a catch body handling the\n                // error with another try-catch statement, and we do not want to\n                // recommend doing so.\n                }\n            }\n        }\n        return details;\n    }\n}\n/**\n * Create an error message, prefixing the given code.\n */ function createMessage(message, code) {\n    return message.length ? `[${codeToString(code)}] ${message}` : `[${codeToString(code)}]`;\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Merge two or more Headers objects by appending all fields from\n * all inputs to a new Headers object.\n */ function appendHeaders(...headers) {\n    const h = new Headers();\n    for (const e of headers){\n        e.forEach((value, key)=>{\n            h.append(key, value);\n        });\n    }\n    return h;\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create any client for the given service.\n *\n * The given createMethod function is called for each method definition\n * of the service. The function it returns is added to the client object\n * as a method.\n */ function makeAnyClient(service, createMethod) {\n    const client = {};\n    for (const [localName, methodInfo] of Object.entries(service.methods)){\n        const method = createMethod(Object.assign(Object.assign({}, methodInfo), {\n            localName,\n            service\n        }));\n        if (method != null) {\n            client[localName] = method;\n        }\n    }\n    return client;\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create a WHATWG ReadableStream of enveloped messages from a ReadableStream\n * of bytes.\n *\n * Ideally, this would simply be a TransformStream, but ReadableStream.pipeThrough\n * does not have the necessary availability at this time.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function createEnvelopeReadableStream(stream) {\n    let reader;\n    let buffer = new Uint8Array(0);\n    function append(chunk) {\n        const n = new Uint8Array(buffer.length + chunk.length);\n        n.set(buffer);\n        n.set(chunk, buffer.length);\n        buffer = n;\n    }\n    return new ReadableStream({\n        start () {\n            reader = stream.getReader();\n        },\n        async pull (controller) {\n            let header = undefined;\n            for(;;){\n                if (header === undefined && buffer.byteLength >= 5) {\n                    let length = 0;\n                    for(let i = 1; i < 5; i++){\n                        length = (length << 8) + buffer[i];\n                    }\n                    header = {\n                        flags: buffer[0],\n                        length\n                    };\n                }\n                if (header !== undefined && buffer.byteLength >= header.length + 5) {\n                    break;\n                }\n                const result = await reader.read();\n                if (result.done) {\n                    break;\n                }\n                append(result.value);\n            }\n            if (header === undefined) {\n                if (buffer.byteLength == 0) {\n                    controller.close();\n                    return;\n                }\n                controller.error(new ConnectError(\"premature end of stream\", Code.DataLoss));\n                return;\n            }\n            const data = buffer.subarray(5, 5 + header.length);\n            buffer = buffer.subarray(5 + header.length);\n            controller.enqueue({\n                flags: header.flags,\n                data\n            });\n        }\n    });\n}\n/**\n * Encode a single enveloped message.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function encodeEnvelope(flags, data) {\n    const bytes = new Uint8Array(data.length + 5);\n    bytes.set(data, 5);\n    const v = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    v.setUint8(0, flags); // first byte is flags\n    v.setUint32(1, data.length); // 4 bytes message length\n    return bytes;\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __asyncValues$1 =  false || function(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n};\nvar __await$2 =  false || function(v) {\n    return this instanceof __await$2 ? (this.v = v, this) : new __await$2(v);\n};\nvar __asyncGenerator$2 =  false || function(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await$2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n};\nvar __asyncDelegator$1 =  false || function(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await$2(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n};\n/**\n * Create an asynchronous iterable from an array.\n *\n * @private Internal code, does not follow semantic versioning.\n */ // eslint-disable-next-line @typescript-eslint/require-await\nfunction createAsyncIterable(items) {\n    return __asyncGenerator$2(this, arguments, function* createAsyncIterable_1() {\n        yield __await$2((yield* __asyncDelegator$1(__asyncValues$1(items))));\n    });\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __asyncValues =  false || function(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n};\nvar __await$1 =  false || function(v) {\n    return this instanceof __await$1 ? (this.v = v, this) : new __await$1(v);\n};\nvar __asyncDelegator =  false || function(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await$1(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n};\nvar __asyncGenerator$1 =  false || function(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await$1 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n};\n/**\n * Create a PromiseClient for the given service, invoking RPCs through the\n * given transport.\n */ function createPromiseClient(service, transport) {\n    return makeAnyClient(service, (method)=>{\n        switch(method.kind){\n            case MethodKind.Unary:\n                return createUnaryFn(transport, service, method);\n            case MethodKind.ServerStreaming:\n                return createServerStreamingFn(transport, service, method);\n            case MethodKind.ClientStreaming:\n                return createClientStreamingFn(transport, service, method);\n            case MethodKind.BiDiStreaming:\n                return createBiDiStreamingFn(transport, service, method);\n            default:\n                return null;\n        }\n    });\n}\nfunction createUnaryFn(transport, service, method) {\n    return async function(input, options) {\n        var _a, _b;\n        const response = await transport.unary(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input, options === null || options === void 0 ? void 0 : options.contextValues);\n        (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);\n        (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);\n        return response.message;\n    };\n}\nfunction createServerStreamingFn(transport, service, method) {\n    return function(input, options) {\n        return handleStreamResponse(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, createAsyncIterable([\n            input\n        ]), options === null || options === void 0 ? void 0 : options.contextValues), options);\n    };\n}\nfunction createClientStreamingFn(transport, service, method) {\n    return async function(request, options) {\n        var _a, e_1, _b, _c;\n        var _d, _e;\n        const response = await transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request, options === null || options === void 0 ? void 0 : options.contextValues);\n        (_d = options === null || options === void 0 ? void 0 : options.onHeader) === null || _d === void 0 ? void 0 : _d.call(options, response.header);\n        let singleMessage;\n        try {\n            for(var _f = true, _g = __asyncValues(response.message), _h; _h = await _g.next(), _a = _h.done, !_a; _f = true){\n                _c = _h.value;\n                _f = false;\n                const message = _c;\n                singleMessage = message;\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (!_f && !_a && (_b = _g.return)) await _b.call(_g);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n        if (!singleMessage) {\n            throw new ConnectError(\"protocol error: missing response message\", Code.Internal);\n        }\n        (_e = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _e === void 0 ? void 0 : _e.call(options, response.trailer);\n        return singleMessage;\n    };\n}\nfunction createBiDiStreamingFn(transport, service, method) {\n    return function(request, options) {\n        return handleStreamResponse(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request, options === null || options === void 0 ? void 0 : options.contextValues), options);\n    };\n}\nfunction handleStreamResponse(stream, options) {\n    const it = (function() {\n        var _a, _b;\n        return __asyncGenerator$1(this, arguments, function*() {\n            const response = yield __await$1(stream);\n            (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);\n            yield __await$1((yield* __asyncDelegator(__asyncValues(response.message))));\n            (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);\n        });\n    })()[Symbol.asyncIterator]();\n    // Create a new iterable to omit throw/return.\n    return {\n        [Symbol.asyncIterator]: ()=>({\n                next: ()=>it.next()\n            })\n    };\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create an AbortController that is automatically aborted if one of the given\n * signals is aborted.\n *\n * For convenience, the linked AbortSignals can be undefined.\n *\n * If the controller or any of the signals is aborted, all event listeners are\n * removed.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function createLinkedAbortController(...signals) {\n    const controller = new AbortController();\n    const sa = signals.filter((s)=>s !== undefined).concat(controller.signal);\n    for (const signal of sa){\n        if (signal.aborted) {\n            onAbort.apply(signal);\n            break;\n        }\n        signal.addEventListener(\"abort\", onAbort);\n    }\n    function onAbort() {\n        if (!controller.signal.aborted) {\n            controller.abort(getAbortSignalReason(this));\n        }\n        for (const signal of sa){\n            signal.removeEventListener(\"abort\", onAbort);\n        }\n    }\n    return controller;\n}\n/**\n * Create a deadline signal. The returned object contains an AbortSignal, but\n * also a cleanup function to stop the timer, which must be called once the\n * calling code is no longer interested in the signal.\n *\n * Ideally, we would simply use AbortSignal.timeout(), but it is not widely\n * available yet.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function createDeadlineSignal(timeoutMs) {\n    const controller = new AbortController();\n    const listener = ()=>{\n        controller.abort(new ConnectError(\"the operation timed out\", Code.DeadlineExceeded));\n    };\n    let timeoutId;\n    if (timeoutMs !== undefined) {\n        if (timeoutMs <= 0) listener();\n        else timeoutId = setTimeout(listener, timeoutMs);\n    }\n    return {\n        signal: controller.signal,\n        cleanup: ()=>clearTimeout(timeoutId)\n    };\n}\n/**\n * Returns the reason why an AbortSignal was aborted. Returns undefined if the\n * signal has not been aborted.\n *\n * The property AbortSignal.reason is not widely available. This function\n * returns an AbortError if the signal is aborted, but reason is undefined.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function getAbortSignalReason(signal) {\n    if (!signal.aborted) {\n        return undefined;\n    }\n    if (signal.reason !== undefined) {\n        return signal.reason;\n    }\n    // AbortSignal.reason is available in Node.js v16, v18, and later,\n    // and in all browsers since early 2022.\n    const e = new Error(\"This operation was aborted\");\n    e.name = \"AbortError\";\n    return e;\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * createContextValues creates a new ContextValues.\n */ function createContextValues() {\n    return {\n        get (key) {\n            return key.id in this ? this[key.id] : key.defaultValue;\n        },\n        set (key, value) {\n            this[key.id] = value;\n            return this;\n        },\n        delete (key) {\n            delete this[key.id];\n            return this;\n        }\n    };\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create a URL for the given RPC. This simply adds the qualified\n * service name, a slash, and the method name to the path of the given\n * baseUrl.\n *\n * For example, the baseUri https://example.com and method \"Say\" from\n * the service example.ElizaService results in:\n * https://example.com/example.ElizaService/Say\n *\n * This format is used by the protocols Connect, gRPC and Twirp.\n *\n * Note that this function also accepts a protocol-relative baseUrl.\n * If given an empty string or \"/\" as a baseUrl, it returns just the\n * path.\n */ function createMethodUrl(baseUrl, service, method) {\n    const s = typeof service == \"string\" ? service : service.typeName;\n    const m = typeof method == \"string\" ? method : method.name;\n    return baseUrl.toString().replace(/\\/?$/, `/${s}/${m}`);\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n *  Takes a partial protobuf messages of the\n *  specified message type as input, and returns full instances.\n */ function normalize(type, message) {\n    return message instanceof Message ? message : new type(message);\n}\n/**\n * Takes an AsyncIterable of partial protobuf messages of the\n * specified message type as input, and yields full instances.\n */ function normalizeIterable(messageType, input) {\n    function transform(result) {\n        if (result.done === true) {\n            return result;\n        }\n        return {\n            done: result.done,\n            value: normalize(messageType, result.value)\n        };\n    }\n    return {\n        [Symbol.asyncIterator] () {\n            const it = input[Symbol.asyncIterator]();\n            const res = {\n                next: ()=>it.next().then(transform)\n            };\n            if (it.throw !== undefined) {\n                res.throw = (e)=>it.throw(e).then(transform); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            }\n            if (it.return !== undefined) {\n                res.return = (v)=>it.return(v).then(transform); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            }\n            return res;\n        }\n    };\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Sets default JSON serialization options for connect-es.\n *\n * With standard protobuf JSON serialization, unknown JSON fields are\n * rejected by default. In connect-es, unknown JSON fields are ignored\n * by default.\n */ function getJsonOptions(options) {\n    var _a;\n    const o = Object.assign({}, options);\n    (_a = o.ignoreUnknownFields) !== null && _a !== void 0 ? _a : o.ignoreUnknownFields = true;\n    return o;\n}\n/**\n * Returns functions to normalize and serialize the input message\n * of an RPC, and to parse the output message of an RPC.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function createClientMethodSerializers(method, useBinaryFormat, jsonOptions, binaryOptions) {\n    const input = useBinaryFormat ? createBinarySerialization(method.I, binaryOptions) : createJsonSerialization(method.I, jsonOptions);\n    const output = useBinaryFormat ? createBinarySerialization(method.O, binaryOptions) : createJsonSerialization(method.O, jsonOptions);\n    return {\n        parse: output.parse,\n        serialize: input.serialize\n    };\n}\n/**\n * Creates a Serialization object for serializing the given protobuf message\n * with the protobuf binary format.\n */ function createBinarySerialization(messageType, options) {\n    return {\n        parse (data) {\n            try {\n                return messageType.fromBinary(data, options);\n            } catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new ConnectError(`parse binary: ${m}`, Code.InvalidArgument);\n            }\n        },\n        serialize (data) {\n            try {\n                return data.toBinary(options);\n            } catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new ConnectError(`serialize binary: ${m}`, Code.Internal);\n            }\n        }\n    };\n}\n/**\n * Creates a Serialization object for serializing the given protobuf message\n * with the protobuf canonical JSON encoding.\n *\n * By default, unknown fields are ignored.\n */ function createJsonSerialization(messageType, options) {\n    var _a, _b;\n    const textEncoder = (_a = options === null || options === void 0 ? void 0 : options.textEncoder) !== null && _a !== void 0 ? _a : new TextEncoder();\n    const textDecoder = (_b = options === null || options === void 0 ? void 0 : options.textDecoder) !== null && _b !== void 0 ? _b : new TextDecoder();\n    const o = getJsonOptions(options);\n    return {\n        parse (data) {\n            try {\n                const json = textDecoder.decode(data);\n                return messageType.fromJsonString(json, o);\n            } catch (e) {\n                throw ConnectError.from(e, Code.InvalidArgument);\n            }\n        },\n        serialize (data) {\n            try {\n                const json = data.toJsonString(o);\n                return textEncoder.encode(json);\n            } catch (e) {\n                throw ConnectError.from(e, Code.Internal);\n            }\n        }\n    };\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Regular Expression that matches any valid Connect Content-Type header value.\n *\n * @private Internal code, does not follow semantic versioning.\n */ const contentTypeRegExp = /^application\\/(connect\\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;\nconst contentTypeUnaryProto = \"application/proto\";\nconst contentTypeUnaryJson = \"application/json\";\nconst contentTypeStreamProto = \"application/connect+proto\";\nconst contentTypeStreamJson = \"application/connect+json\";\n/**\n * Parse a Connect Content-Type header.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function parseContentType(contentType) {\n    const match = contentType === null || contentType === void 0 ? void 0 : contentType.match(contentTypeRegExp);\n    if (!match) {\n        return undefined;\n    }\n    const stream = !!match[1];\n    const binary = !!match[3];\n    return {\n        stream,\n        binary\n    };\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n false || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\n/**\n * Parse a Connect error from a JSON value.\n * Will return a ConnectError, and throw the provided fallback if parsing failed.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function errorFromJson(jsonValue, metadata, fallback) {\n    if (metadata) {\n        new Headers(metadata).forEach((value, key)=>fallback.metadata.append(key, value));\n    }\n    if (typeof jsonValue !== \"object\" || jsonValue == null || Array.isArray(jsonValue) || !(\"code\" in jsonValue) || typeof jsonValue.code !== \"string\") {\n        throw fallback;\n    }\n    const code = codeFromString(jsonValue.code);\n    if (code === undefined) {\n        throw fallback;\n    }\n    const message = jsonValue.message;\n    if (message != null && typeof message !== \"string\") {\n        throw fallback;\n    }\n    const error = new ConnectError(message !== null && message !== void 0 ? message : \"\", code, metadata);\n    if (\"details\" in jsonValue && Array.isArray(jsonValue.details)) {\n        for (const detail of jsonValue.details){\n            if (detail === null || typeof detail != \"object\" || Array.isArray(detail) || typeof detail.type != \"string\" || typeof detail.value != \"string\" || \"debug\" in detail && typeof detail.debug != \"object\") {\n                throw fallback;\n            }\n            try {\n                error.details.push({\n                    type: detail.type,\n                    value: protoBase64.dec(detail.value),\n                    debug: detail.debug\n                });\n            } catch (e) {\n                throw fallback;\n            }\n        }\n    }\n    return error;\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * endStreamFlag indicates that the data in a EnvelopedMessage\n * is a EndStreamResponse of the Connect protocol.\n *\n * @private Internal code, does not follow semantic versioning.\n */ const endStreamFlag = 2;\n/**\n * Parse an EndStreamResponse of the Connect protocol.\n * Throws a ConnectError on malformed input.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function endStreamFromJson(data) {\n    const parseErr = new ConnectError(\"invalid end stream\", Code.InvalidArgument);\n    let jsonValue;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        jsonValue = JSON.parse(typeof data == \"string\" ? data : new TextDecoder().decode(data));\n    } catch (e) {\n        throw parseErr;\n    }\n    if (typeof jsonValue != \"object\" || jsonValue == null || Array.isArray(jsonValue)) {\n        throw parseErr;\n    }\n    const metadata = new Headers();\n    if (\"metadata\" in jsonValue) {\n        if (typeof jsonValue.metadata != \"object\" || jsonValue.metadata == null || Array.isArray(jsonValue.metadata)) {\n            throw parseErr;\n        }\n        for (const [key, values] of Object.entries(jsonValue.metadata)){\n            if (!Array.isArray(values) || values.some((value)=>typeof value != \"string\")) {\n                throw parseErr;\n            }\n            for (const value of values){\n                metadata.append(key, value);\n            }\n        }\n    }\n    const error = \"error\" in jsonValue ? errorFromJson(jsonValue.error, metadata, parseErr) : undefined;\n    return {\n        metadata,\n        error\n    };\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * @private Internal code, does not follow semantic versioning.\n */ const headerContentType = \"Content-Type\";\nconst headerUnaryContentLength = \"Content-Length\";\nconst headerUnaryEncoding = \"Content-Encoding\";\nconst headerUnaryAcceptEncoding = \"Accept-Encoding\";\nconst headerTimeout = \"Connect-Timeout-Ms\";\nconst headerProtocolVersion = \"Connect-Protocol-Version\";\nconst headerUserAgent = \"User-Agent\";\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Determine the Connect error code for the given HTTP status code.\n * See https://connectrpc.com/docs/protocol#error-codes\n *\n * @private Internal code, does not follow semantic versioning.\n */ function codeFromHttpStatus(httpStatus) {\n    switch(httpStatus){\n        case 400:\n            return Code.InvalidArgument;\n        case 401:\n            return Code.Unauthenticated;\n        case 403:\n            return Code.PermissionDenied;\n        case 404:\n            return Code.Unimplemented;\n        case 408:\n            return Code.DeadlineExceeded;\n        case 409:\n            return Code.Aborted;\n        case 412:\n            return Code.FailedPrecondition;\n        case 413:\n            return Code.ResourceExhausted;\n        case 415:\n            return Code.Internal;\n        case 429:\n            return Code.Unavailable;\n        case 431:\n            return Code.ResourceExhausted;\n        case 502:\n            return Code.Unavailable;\n        case 503:\n            return Code.Unavailable;\n        case 504:\n            return Code.Unavailable;\n        default:\n            return Code.Unknown;\n    }\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * In unary RPCs, Connect transports trailing metadata as response header\n * fields, prefixed with \"trailer-\".\n *\n * This function demuxes headers and trailers into two separate Headers\n * objects.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function trailerDemux(header) {\n    const h = new Headers(), t = new Headers();\n    header.forEach((value, key)=>{\n        if (key.toLowerCase().startsWith(\"trailer-\")) {\n            t.set(key.substring(8), value);\n        } else {\n            h.set(key, value);\n        }\n    });\n    return [\n        h,\n        t\n    ];\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * The only know value for the header Connect-Protocol-Version.\n *\n * @private Internal code, does not follow semantic versioning.\n */ const protocolVersion = \"1\";\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Creates headers for a Connect request.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders) {\n    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});\n    if (timeoutMs !== undefined) {\n        result.set(headerTimeout, `${timeoutMs}`);\n    }\n    result.set(headerContentType, methodKind == MethodKind.Unary ? useBinaryFormat ? contentTypeUnaryProto : contentTypeUnaryJson : useBinaryFormat ? contentTypeStreamProto : contentTypeStreamJson);\n    result.set(headerProtocolVersion, protocolVersion);\n    result.set(headerUserAgent, \"connect-es/1.1.3\");\n    return result;\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Validates response status and header for the Connect protocol.\n * Throws a ConnectError if the header indicates an error, or if\n * the content type is unexpected, with the following exception:\n * For unary RPCs with an HTTP error status, this returns an error\n * derived from the HTTP status instead of throwing it, giving an\n * implementation a chance to parse a Connect error from the wire.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function validateResponse(methodKind, status, headers) {\n    const mimeType = headers.get(\"Content-Type\");\n    const parsedType = parseContentType(mimeType);\n    if (status !== 200) {\n        const errorFromStatus = new ConnectError(`HTTP ${status}`, codeFromHttpStatus(status), headers);\n        // If parsedType is defined and it is not binary, then this is a unary JSON response\n        if (methodKind == MethodKind.Unary && parsedType && !parsedType.binary) {\n            return {\n                isUnaryError: true,\n                unaryError: errorFromStatus\n            };\n        }\n        throw errorFromStatus;\n    }\n    return {\n        isUnaryError: false\n    };\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nconst contentTypePrefix = \"application/\";\nfunction encodeMessageForUrl(message, useBase64) {\n    if (useBase64) {\n        // TODO(jchadwick-buf): Three regex replaces seems excessive.\n        // Can we make protoBase64.enc more flexible?\n        return protoBase64.enc(message).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n    } else {\n        return encodeURIComponent(new TextDecoder().decode(message));\n    }\n}\n/**\n * @private Internal code, does not follow semantic versioning.\n */ function transformConnectPostToGetRequest(request, message, useBase64) {\n    let query = `?connect=v${protocolVersion}`;\n    const contentType = request.header.get(headerContentType);\n    if ((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(contentTypePrefix)) === 0) {\n        query += \"&encoding=\" + encodeURIComponent(contentType.slice(contentTypePrefix.length));\n    }\n    const compression = request.header.get(headerUnaryEncoding);\n    if (compression !== null && compression !== \"identity\") {\n        query += \"&compression=\" + encodeURIComponent(compression);\n        // Force base64 for compressed payloads.\n        useBase64 = true;\n    }\n    if (useBase64) {\n        query += \"&base64=1\";\n    }\n    query += \"&message=\" + encodeMessageForUrl(message, useBase64);\n    const url = request.url + query;\n    // Omit headers that are not used for unary GET requests.\n    const header = new Headers(request.header);\n    [\n        headerProtocolVersion,\n        headerContentType,\n        headerUnaryContentLength,\n        headerUnaryEncoding,\n        headerUnaryAcceptEncoding\n    ].forEach((h)=>header.delete(h));\n    return Object.assign(Object.assign({}, request), {\n        init: Object.assign(Object.assign({}, request.init), {\n            method: \"GET\"\n        }),\n        url,\n        header\n    });\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Runs a unary method with the given interceptors. Note that this function\n * is only used when implementing a Transport.\n */ function runUnaryCall(opt) {\n    const next = applyInterceptors(opt.next, opt.interceptors);\n    const [signal, abort, done] = setupSignal(opt);\n    const req = Object.assign(Object.assign({}, opt.req), {\n        message: normalize(opt.req.method.I, opt.req.message),\n        signal\n    });\n    return next(req).then((res)=>{\n        done();\n        return res;\n    }, abort);\n}\n/**\n * Runs a server-streaming method with the given interceptors. Note that this\n * function is only used when implementing a Transport.\n */ function runStreamingCall(opt) {\n    const next = applyInterceptors(opt.next, opt.interceptors);\n    const [signal, abort, done] = setupSignal(opt);\n    const req = Object.assign(Object.assign({}, opt.req), {\n        message: normalizeIterable(opt.req.method.I, opt.req.message),\n        signal\n    });\n    let doneCalled = false;\n    // Call return on the request iterable to indicate\n    // that we will no longer consume it and it should\n    // cleanup any allocated resources.\n    signal.addEventListener(\"abort\", function() {\n        var _a, _b;\n        const it = opt.req.message[Symbol.asyncIterator]();\n        // If the signal is aborted due to an error, we want to throw\n        // the error to the request iterator.\n        if (!doneCalled) {\n            (_a = it.throw) === null || _a === void 0 ? void 0 : _a.call(it, this.reason).catch(()=>{\n            // throw returns a promise, which we don't care about.\n            //\n            // Uncaught promises are thrown at sometime/somewhere by the event loop,\n            // this is to ensure error is caught and ignored.\n            });\n        }\n        (_b = it.return) === null || _b === void 0 ? void 0 : _b.call(it).catch(()=>{\n        // return returns a promise, which we don't care about.\n        //\n        // Uncaught promises are thrown at sometime/somewhere by the event loop,\n        // this is to ensure error is caught and ignored.\n        });\n    });\n    return next(req).then((res)=>{\n        return Object.assign(Object.assign({}, res), {\n            message: {\n                [Symbol.asyncIterator] () {\n                    const it = res.message[Symbol.asyncIterator]();\n                    return {\n                        next () {\n                            return it.next().then((r)=>{\n                                if (r.done == true) {\n                                    doneCalled = true;\n                                    done();\n                                }\n                                return r;\n                            }, abort);\n                        }\n                    };\n                }\n            }\n        });\n    }, abort);\n}\n/**\n * Create an AbortSignal for Transport implementations. The signal is available\n * in UnaryRequest and StreamingRequest, and is triggered when the call is\n * aborted (via a timeout or explicit cancellation), errored (e.g. when reading\n * an error from the server from the wire), or finished successfully.\n *\n * Transport implementations can pass the signal to HTTP clients to ensure that\n * there are no unused connections leak.\n *\n * Returns a tuple:\n * [0]: The signal, which is also aborted if the optional deadline is reached.\n * [1]: Function to call if the Transport encountered an error.\n * [2]: Function to call if the Transport finished without an error.\n */ function setupSignal(opt) {\n    const { signal, cleanup } = createDeadlineSignal(opt.timeoutMs);\n    const controller = createLinkedAbortController(opt.signal, signal);\n    return [\n        controller.signal,\n        function abort(reason) {\n            // We peek at the deadline signal because fetch() will throw an error on\n            // abort that discards the signal reason.\n            const e = ConnectError.from(signal.aborted ? getAbortSignalReason(signal) : reason);\n            controller.abort(e);\n            cleanup();\n            return Promise.reject(e);\n        },\n        function done() {\n            cleanup();\n            controller.abort();\n        }\n    ];\n}\n/**\n * applyInterceptors takes the given UnaryFn or ServerStreamingFn, and wraps\n * it with each of the given interceptors, returning a new UnaryFn or\n * ServerStreamingFn.\n */ function applyInterceptors(next, interceptors) {\n    var _a;\n    return (_a = interceptors === null || interceptors === void 0 ? void 0 : interceptors.concat().reverse().reduce(// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    (n, i)=>i(n), next)) !== null && _a !== void 0 ? _a : next;\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Asserts that the fetch API is available.\n */ function assertFetchApi() {\n    try {\n        new Headers();\n    } catch (_) {\n        throw new Error(\"connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.\");\n    }\n}\n// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __await =  false || function(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n};\nvar __asyncGenerator =  false || function(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n};\n/**\n * Create a Transport for the Connect protocol, which makes unary and\n * server-streaming methods available to web browsers. It uses the fetch\n * API to make HTTP requests.\n */ function createConnectTransport(options) {\n    var _a;\n    assertFetchApi();\n    const useBinaryFormat = (_a = options.useBinaryFormat) !== null && _a !== void 0 ? _a : false;\n    return {\n        async unary (service, method, signal, timeoutMs, header, message, contextValues) {\n            var _a;\n            const { serialize, parse } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);\n            timeoutMs = timeoutMs === undefined ? options.defaultTimeoutMs : timeoutMs <= 0 ? undefined : timeoutMs;\n            return await runUnaryCall({\n                interceptors: options.interceptors,\n                signal,\n                timeoutMs,\n                req: {\n                    stream: false,\n                    service,\n                    method,\n                    url: createMethodUrl(options.baseUrl, service, method),\n                    init: {\n                        method: \"POST\",\n                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : \"same-origin\",\n                        redirect: \"error\",\n                        mode: \"cors\"\n                    },\n                    header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header),\n                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : createContextValues(),\n                    message\n                },\n                next: async (req)=>{\n                    var _a;\n                    const useGet = options.useHttpGet === true && method.idempotency === MethodIdempotency.NoSideEffects;\n                    let body = null;\n                    if (useGet) {\n                        req = transformConnectPostToGetRequest(req, serialize(req.message), useBinaryFormat);\n                    } else {\n                        body = serialize(req.message);\n                    }\n                    const fetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : globalThis.fetch;\n                    const response = await fetch(req.url, Object.assign(Object.assign({}, req.init), {\n                        headers: req.header,\n                        signal: req.signal,\n                        body\n                    }));\n                    const { isUnaryError, unaryError } = validateResponse(method.kind, response.status, response.headers);\n                    if (isUnaryError) {\n                        throw errorFromJson(await response.json(), appendHeaders(...trailerDemux(response.headers)), unaryError);\n                    }\n                    const [demuxedHeader, demuxedTrailer] = trailerDemux(response.headers);\n                    return {\n                        stream: false,\n                        service,\n                        method,\n                        header: demuxedHeader,\n                        message: useBinaryFormat ? parse(new Uint8Array(await response.arrayBuffer())) : method.O.fromJson(await response.json(), getJsonOptions(options.jsonOptions)),\n                        trailer: demuxedTrailer\n                    };\n                }\n            });\n        },\n        async stream (service, method, signal, timeoutMs, header, input, contextValues) {\n            var _a;\n            const { serialize, parse } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);\n            function parseResponseBody(body, trailerTarget) {\n                return __asyncGenerator(this, arguments, function* parseResponseBody_1() {\n                    const reader = createEnvelopeReadableStream(body).getReader();\n                    let endStreamReceived = false;\n                    for(;;){\n                        const result = yield __await(reader.read());\n                        if (result.done) {\n                            break;\n                        }\n                        const { flags, data } = result.value;\n                        if ((flags & endStreamFlag) === endStreamFlag) {\n                            endStreamReceived = true;\n                            const endStream = endStreamFromJson(data);\n                            if (endStream.error) {\n                                throw endStream.error;\n                            }\n                            endStream.metadata.forEach((value, key)=>trailerTarget.set(key, value));\n                            continue;\n                        }\n                        yield yield __await(parse(data));\n                    }\n                    if (!endStreamReceived) {\n                        throw \"missing EndStreamResponse\";\n                    }\n                });\n            }\n            async function createRequestBody(input) {\n                if (method.kind != MethodKind.ServerStreaming) {\n                    throw \"The fetch API does not support streaming request bodies\";\n                }\n                const r = await input[Symbol.asyncIterator]().next();\n                if (r.done == true) {\n                    throw \"missing request message\";\n                }\n                return encodeEnvelope(0, serialize(r.value));\n            }\n            timeoutMs = timeoutMs === undefined ? options.defaultTimeoutMs : timeoutMs <= 0 ? undefined : timeoutMs;\n            return await runStreamingCall({\n                interceptors: options.interceptors,\n                timeoutMs,\n                signal,\n                req: {\n                    stream: true,\n                    service,\n                    method,\n                    url: createMethodUrl(options.baseUrl, service, method),\n                    init: {\n                        method: \"POST\",\n                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : \"same-origin\",\n                        redirect: \"error\",\n                        mode: \"cors\"\n                    },\n                    header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header),\n                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : createContextValues(),\n                    message: input\n                },\n                next: async (req)=>{\n                    var _a;\n                    const fetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : globalThis.fetch;\n                    const fRes = await fetch(req.url, Object.assign(Object.assign({}, req.init), {\n                        headers: req.header,\n                        signal: req.signal,\n                        body: await createRequestBody(req.message)\n                    }));\n                    validateResponse(method.kind, fRes.status, fRes.headers);\n                    if (fRes.body === null) {\n                        throw \"missing response body\";\n                    }\n                    const trailer = new Headers();\n                    const res = Object.assign(Object.assign({}, req), {\n                        header: fRes.headers,\n                        trailer,\n                        message: parseResponseBody(fRes.body, trailer)\n                    });\n                    return res;\n                }\n            });\n        }\n    };\n}\n/**\n * Status of the Codeium AI completions generation.\n */ var Status;\n(function(Status) {\n    Status[\"INACTIVE\"] = \"inactive\";\n    Status[\"PROCESSING\"] = \"processing\";\n    Status[\"SUCCESS\"] = \"success\";\n    Status[\"WARNING\"] = \"warning\";\n    Status[\"ERROR\"] = \"error\";\n})(Status || (Status = {}));\nfunction _defineProperty$1(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction ownKeys$1(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2$1(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$1(Object(source), true).forEach(function(key) {\n                _defineProperty$1(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$1(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction compose$1() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    return function(x) {\n        return fns.reduceRight(function(y, f) {\n            return f(y);\n        }, x);\n    };\n}\nfunction curry$1(fn) {\n    return function curried() {\n        var _this = this;\n        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n            args[_key2] = arguments[_key2];\n        }\n        return args.length >= fn.length ? fn.apply(this, args) : function() {\n            for(var _len3 = arguments.length, nextArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n                nextArgs[_key3] = arguments[_key3];\n            }\n            return curried.apply(_this, [].concat(args, nextArgs));\n        };\n    };\n}\nfunction isObject$1(value) {\n    return ({}).toString.call(value).includes('Object');\n}\nfunction isEmpty(obj) {\n    return !Object.keys(obj).length;\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction hasOwnProperty(object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n}\nfunction validateChanges(initial, changes) {\n    if (!isObject$1(changes)) errorHandler$1('changeType');\n    if (Object.keys(changes).some(function(field) {\n        return !hasOwnProperty(initial, field);\n    })) errorHandler$1('changeField');\n    return changes;\n}\nfunction validateSelector(selector) {\n    if (!isFunction(selector)) errorHandler$1('selectorType');\n}\nfunction validateHandler(handler) {\n    if (!(isFunction(handler) || isObject$1(handler))) errorHandler$1('handlerType');\n    if (isObject$1(handler) && Object.values(handler).some(function(_handler) {\n        return !isFunction(_handler);\n    })) errorHandler$1('handlersType');\n}\nfunction validateInitial(initial) {\n    if (!initial) errorHandler$1('initialIsRequired');\n    if (!isObject$1(initial)) errorHandler$1('initialType');\n    if (isEmpty(initial)) errorHandler$1('initialContent');\n}\nfunction throwError$1(errorMessages, type) {\n    throw new Error(errorMessages[type] || errorMessages[\"default\"]);\n}\nvar errorMessages$1 = {\n    initialIsRequired: 'initial state is required',\n    initialType: 'initial state should be an object',\n    initialContent: 'initial state shouldn\\'t be an empty object',\n    handlerType: 'handler should be an object or a function',\n    handlersType: 'all handlers should be a functions',\n    selectorType: 'selector should be a function',\n    changeType: 'provided value of changes should be an object',\n    changeField: 'it seams you want to change a field in the state which is not specified in the \"initial\" state',\n    \"default\": 'an unknown error accured in `state-local` package'\n};\nvar errorHandler$1 = curry$1(throwError$1)(errorMessages$1);\nvar validators$1 = {\n    changes: validateChanges,\n    selector: validateSelector,\n    handler: validateHandler,\n    initial: validateInitial\n};\nfunction create(initial) {\n    var handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    validators$1.initial(initial);\n    validators$1.handler(handler);\n    var state = {\n        current: initial\n    };\n    var didUpdate = curry$1(didStateUpdate)(state, handler);\n    var update = curry$1(updateState)(state);\n    var validate = curry$1(validators$1.changes)(initial);\n    var getChanges = curry$1(extractChanges)(state);\n    function getState() {\n        var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function(state) {\n            return state;\n        };\n        validators$1.selector(selector);\n        return selector(state.current);\n    }\n    function setState(causedChanges) {\n        compose$1(didUpdate, update, validate, getChanges)(causedChanges);\n    }\n    return [\n        getState,\n        setState\n    ];\n}\nfunction extractChanges(state, causedChanges) {\n    return isFunction(causedChanges) ? causedChanges(state.current) : causedChanges;\n}\nfunction updateState(state, changes) {\n    state.current = _objectSpread2(_objectSpread2({}, state.current), changes);\n    return changes;\n}\nfunction didStateUpdate(state, handler, changes) {\n    isFunction(handler) ? handler(state.current) : Object.keys(changes).forEach(function(field) {\n        var _handler$field;\n        return (_handler$field = handler[field]) === null || _handler$field === void 0 ? void 0 : _handler$field.call(handler, state.current[field]);\n    });\n    return changes;\n}\nvar index = {\n    create: create\n};\nvar config$1 = {\n    paths: {\n        vs: 'https://cdn.jsdelivr.net/npm/monaco-editor@0.43.0/min/vs'\n    }\n};\nfunction curry(fn) {\n    return function curried() {\n        var _this = this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return args.length >= fn.length ? fn.apply(this, args) : function() {\n            for(var _len2 = arguments.length, nextArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                nextArgs[_key2] = arguments[_key2];\n            }\n            return curried.apply(_this, [].concat(args, nextArgs));\n        };\n    };\n}\nfunction isObject(value) {\n    return ({}).toString.call(value).includes('Object');\n}\n/**\n * validates the configuration object and informs about deprecation\n * @param {Object} config - the configuration object \n * @return {Object} config - the validated configuration object\n */ function validateConfig(config) {\n    if (!config) errorHandler('configIsRequired');\n    if (!isObject(config)) errorHandler('configType');\n    if (config.urls) {\n        informAboutDeprecation();\n        return {\n            paths: {\n                vs: config.urls.monacoBase\n            }\n        };\n    }\n    return config;\n}\n/**\n * logs deprecation message\n */ function informAboutDeprecation() {\n    console.warn(errorMessages.deprecation);\n}\nfunction throwError(errorMessages, type) {\n    throw new Error(errorMessages[type] || errorMessages[\"default\"]);\n}\nvar errorMessages = {\n    configIsRequired: 'the configuration object is required',\n    configType: 'the configuration object should be an object',\n    \"default\": 'an unknown error accured in `@monaco-editor/loader` package',\n    deprecation: \"Deprecation warning!\\n    You are using deprecated way of configuration.\\n\\n    Instead of using\\n      monaco.config({ urls: { monacoBase: '...' } })\\n    use\\n      monaco.config({ paths: { vs: '...' } })\\n\\n    For more please check the link https://github.com/suren-atoyan/monaco-loader#config\\n  \"\n};\nvar errorHandler = curry(throwError)(errorMessages);\nvar validators = {\n    config: validateConfig\n};\nvar compose = function compose() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    return function(x) {\n        return fns.reduceRight(function(y, f) {\n            return f(y);\n        }, x);\n    };\n};\nfunction merge(target, source) {\n    Object.keys(source).forEach(function(key) {\n        if (source[key] instanceof Object) {\n            if (target[key]) {\n                Object.assign(source[key], merge(target[key], source[key]));\n            }\n        }\n    });\n    return _objectSpread2$1(_objectSpread2$1({}, target), source);\n}\n// The source (has been changed) is https://github.com/facebook/react/issues/5465#issuecomment-157888325\nvar CANCELATION_MESSAGE = {\n    type: 'cancelation',\n    msg: 'operation is manually canceled'\n};\nfunction makeCancelable(promise) {\n    var hasCanceled_ = false;\n    var wrappedPromise = new Promise(function(resolve, reject) {\n        promise.then(function(val) {\n            return hasCanceled_ ? reject(CANCELATION_MESSAGE) : resolve(val);\n        });\n        promise[\"catch\"](reject);\n    });\n    return wrappedPromise.cancel = function() {\n        return hasCanceled_ = true;\n    }, wrappedPromise;\n}\n/** the local state of the module */ var _state$create = index.create({\n    config: config$1,\n    isInitialized: false,\n    resolve: null,\n    reject: null,\n    monaco: null\n}), _state$create2 = _slicedToArray(_state$create, 2), getState = _state$create2[0], setState = _state$create2[1];\n/**\n * set the loader configuration\n * @param {Object} config - the configuration object\n */ function config(globalConfig) {\n    var _validators$config = validators.config(globalConfig), monaco = _validators$config.monaco, config = _objectWithoutProperties(_validators$config, [\n        \"monaco\"\n    ]);\n    setState(function(state) {\n        return {\n            config: merge(state.config, config),\n            monaco: monaco\n        };\n    });\n}\n/**\n * handles the initialization of the monaco-editor\n * @return {Promise} - returns an instance of monaco (with a cancelable promise)\n */ function init() {\n    var state = getState(function(_ref) {\n        var monaco = _ref.monaco, isInitialized = _ref.isInitialized, resolve = _ref.resolve;\n        return {\n            monaco: monaco,\n            isInitialized: isInitialized,\n            resolve: resolve\n        };\n    });\n    if (!state.isInitialized) {\n        setState({\n            isInitialized: true\n        });\n        if (state.monaco) {\n            state.resolve(state.monaco);\n            return makeCancelable(wrapperPromise);\n        }\n        if (window.monaco && window.monaco.editor) {\n            storeMonacoInstance(window.monaco);\n            state.resolve(window.monaco);\n            return makeCancelable(wrapperPromise);\n        }\n        compose(injectScripts, getMonacoLoaderScript)(configureLoader);\n    }\n    return makeCancelable(wrapperPromise);\n}\n/**\n * injects provided scripts into the document.body\n * @param {Object} script - an HTML script element\n * @return {Object} - the injected HTML script element\n */ function injectScripts(script) {\n    return document.body.appendChild(script);\n}\n/**\n * creates an HTML script element with/without provided src\n * @param {string} [src] - the source path of the script\n * @return {Object} - the created HTML script element\n */ function createScript(src) {\n    var script = document.createElement('script');\n    return src && (script.src = src), script;\n}\n/**\n * creates an HTML script element with the monaco loader src\n * @return {Object} - the created HTML script element\n */ function getMonacoLoaderScript(configureLoader) {\n    var state = getState(function(_ref2) {\n        var config = _ref2.config, reject = _ref2.reject;\n        return {\n            config: config,\n            reject: reject\n        };\n    });\n    var loaderScript = createScript(\"\".concat(state.config.paths.vs, \"/loader.js\"));\n    loaderScript.onload = function() {\n        return configureLoader();\n    };\n    loaderScript.onerror = state.reject;\n    return loaderScript;\n}\n/**\n * configures the monaco loader\n */ function configureLoader() {\n    var state = getState(function(_ref3) {\n        var config = _ref3.config, resolve = _ref3.resolve, reject = _ref3.reject;\n        return {\n            config: config,\n            resolve: resolve,\n            reject: reject\n        };\n    });\n    var require = window.require;\n    require.config(state.config);\n    require([\n        'vs/editor/editor.main'\n    ], function(monaco) {\n        storeMonacoInstance(monaco);\n        state.resolve(monaco);\n    }, function(error) {\n        state.reject(error);\n    });\n}\n/**\n * store monaco instance in local state\n */ function storeMonacoInstance(monaco) {\n    if (!getState().monaco) {\n        setState({\n            monaco: monaco\n        });\n    }\n}\n/**\n * internal helper function\n * extracts stored monaco instance\n * @return {Object|null} - the monaco instance\n */ function __getMonacoInstance() {\n    return getState(function(_ref4) {\n        var monaco = _ref4.monaco;\n        return monaco;\n    });\n}\nvar wrapperPromise = new Promise(function(resolve, reject) {\n    return setState({\n        resolve: resolve,\n        reject: reject\n    });\n});\nvar loader = {\n    config: config,\n    init: init,\n    __getMonacoInstance: __getMonacoInstance\n};\nvar le = {\n    wrapper: {\n        display: \"flex\",\n        position: \"relative\",\n        textAlign: \"initial\"\n    },\n    fullWidth: {\n        width: \"100%\"\n    },\n    hide: {\n        display: \"none\"\n    }\n}, v = le;\nvar ae = {\n    container: {\n        display: \"flex\",\n        height: \"100%\",\n        width: \"100%\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    }\n}, Y = ae;\nfunction Me({ children: e }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: Y.container\n    }, e);\n}\nvar Z = Me;\nvar $ = Z;\nfunction Ee({ width: e, height: r, isEditorReady: n, loading: t, _ref: a, className: m, wrapperProps: E }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"section\", {\n        style: {\n            ...v.wrapper,\n            width: e,\n            height: r\n        },\n        ...E\n    }, !n && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($, null, t), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: a,\n        style: {\n            ...v.fullWidth,\n            ...!n && v.hide\n        },\n        className: m\n    }));\n}\nvar ee = Ee;\nvar H = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(ee);\nfunction Ce(e) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(e, []);\n}\nvar k = Ce;\nfunction he(e, r, n = !0) {\n    let t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!0);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(t.current || !n ? ({\n        \"he.useEffect\": ()=>{\n            t.current = !1;\n        }\n    })[\"he.useEffect\"] : e, r);\n}\nvar l = he;\nfunction D() {}\nfunction h(e, r, n, t) {\n    return De(e, t) || be(e, r, n, t);\n}\nfunction De(e, r) {\n    return e.editor.getModel(te(e, r));\n}\nfunction be(e, r, n, t) {\n    return e.editor.createModel(r, n, t ? te(e, t) : void 0);\n}\nfunction te(e, r) {\n    return e.Uri.parse(r);\n}\nfunction Oe({ original: e, modified: r, language: n, originalLanguage: t, modifiedLanguage: a, originalModelPath: m, modifiedModelPath: E, keepCurrentOriginalModel: g = !1, keepCurrentModifiedModel: N = !1, theme: x = \"light\", loading: P = \"Loading...\", options: y = {}, height: V = \"100%\", width: z = \"100%\", className: F, wrapperProps: j = {}, beforeMount: A = D, onMount: q = D }) {\n    let [M, O] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [T, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), w = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(q), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(A), b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1);\n    k(()=>{\n        let i = loader.init();\n        return i.then((f)=>(c.current = f) && s(!1)).catch((f)=>f?.type !== \"cancelation\" && console.error(\"Monaco initialization: error:\", f)), ()=>u.current ? I() : i.cancel();\n    }), l(()=>{\n        if (u.current && c.current) {\n            let i = u.current.getOriginalEditor(), f = h(c.current, e || \"\", t || n || \"text\", m || \"\");\n            f !== i.getModel() && i.setModel(f);\n        }\n    }, [\n        m\n    ], M), l(()=>{\n        if (u.current && c.current) {\n            let i = u.current.getModifiedEditor(), f = h(c.current, r || \"\", a || n || \"text\", E || \"\");\n            f !== i.getModel() && i.setModel(f);\n        }\n    }, [\n        E\n    ], M), l(()=>{\n        let i = u.current.getModifiedEditor();\n        i.getOption(c.current.editor.EditorOption.readOnly) ? i.setValue(r || \"\") : r !== i.getValue() && (i.executeEdits(\"\", [\n            {\n                range: i.getModel().getFullModelRange(),\n                text: r || \"\",\n                forceMoveMarkers: !0\n            }\n        ]), i.pushUndoStop());\n    }, [\n        r\n    ], M), l(()=>{\n        u.current?.getModel()?.original.setValue(e || \"\");\n    }, [\n        e\n    ], M), l(()=>{\n        let { original: i, modified: f } = u.current.getModel();\n        c.current.editor.setModelLanguage(i, t || n || \"text\"), c.current.editor.setModelLanguage(f, a || n || \"text\");\n    }, [\n        n,\n        t,\n        a\n    ], M), l(()=>{\n        c.current?.editor.setTheme(x);\n    }, [\n        x\n    ], M), l(()=>{\n        u.current?.updateOptions(y);\n    }, [\n        y\n    ], M);\n    let L = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"Oe.useCallback[L]\": ()=>{\n            if (!c.current) return;\n            o.current(c.current);\n            let i = h(c.current, e || \"\", t || n || \"text\", m || \"\"), f = h(c.current, r || \"\", a || n || \"text\", E || \"\");\n            u.current?.setModel({\n                original: i,\n                modified: f\n            });\n        }\n    }[\"Oe.useCallback[L]\"], [\n        n,\n        r,\n        a,\n        e,\n        t,\n        m,\n        E\n    ]), U = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"Oe.useCallback[U]\": ()=>{\n            !b.current && w.current && (u.current = c.current.editor.createDiffEditor(w.current, {\n                automaticLayout: !0,\n                ...y\n            }), L(), c.current?.editor.setTheme(x), O(!0), b.current = !0);\n        }\n    }[\"Oe.useCallback[U]\"], [\n        y,\n        x,\n        L\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"Oe.useEffect\": ()=>{\n            M && d.current(u.current, c.current);\n        }\n    }[\"Oe.useEffect\"], [\n        M\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"Oe.useEffect\": ()=>{\n            !T && !M && U();\n        }\n    }[\"Oe.useEffect\"], [\n        T,\n        M,\n        U\n    ]);\n    function I() {\n        let i = u.current?.getModel();\n        g || i?.original?.dispose(), N || i?.modified?.dispose(), u.current?.dispose();\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(H, {\n        width: z,\n        height: V,\n        isEditorReady: M,\n        loading: P,\n        _ref: w,\n        className: F,\n        wrapperProps: j\n    });\n}\nvar ie = Oe;\n/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(ie);\nfunction He(e) {\n    let r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"He.useEffect\": ()=>{\n            r.current = e;\n        }\n    }[\"He.useEffect\"], [\n        e\n    ]), r.current;\n}\nvar se = He;\nvar _ = new Map;\nfunction Ve({ defaultValue: e, defaultLanguage: r, defaultPath: n, value: t, language: a, path: m, theme: E = \"light\", line: g, loading: N = \"Loading...\", options: x = {}, overrideServices: P = {}, saveViewState: y = !0, keepCurrentModel: V = !1, width: z = \"100%\", height: F = \"100%\", className: j, wrapperProps: A = {}, beforeMount: q = D, onMount: M = D, onChange: O, onValidate: T = D }) {\n    let [s, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [c, w] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), L = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(M), U = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(q), I = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(t), f = se(m), Q = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1), B = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1);\n    k(()=>{\n        let p = loader.init();\n        return p.then((R)=>(d.current = R) && w(!1)).catch((R)=>R?.type !== \"cancelation\" && console.error(\"Monaco initialization: error:\", R)), ()=>o.current ? pe() : p.cancel();\n    }), l(()=>{\n        let p = h(d.current, e || t || \"\", r || a || \"\", m || n || \"\");\n        p !== o.current?.getModel() && (y && _.set(f, o.current?.saveViewState()), o.current?.setModel(p), y && o.current?.restoreViewState(_.get(m)));\n    }, [\n        m\n    ], s), l(()=>{\n        o.current?.updateOptions(x);\n    }, [\n        x\n    ], s), l(()=>{\n        !o.current || t === void 0 || (o.current.getOption(d.current.editor.EditorOption.readOnly) ? o.current.setValue(t) : t !== o.current.getValue() && (B.current = !0, o.current.executeEdits(\"\", [\n            {\n                range: o.current.getModel().getFullModelRange(),\n                text: t,\n                forceMoveMarkers: !0\n            }\n        ]), o.current.pushUndoStop(), B.current = !1));\n    }, [\n        t\n    ], s), l(()=>{\n        let p = o.current?.getModel();\n        p && a && d.current?.editor.setModelLanguage(p, a);\n    }, [\n        a\n    ], s), l(()=>{\n        g !== void 0 && o.current?.revealLine(g);\n    }, [\n        g\n    ], s), l(()=>{\n        d.current?.editor.setTheme(E);\n    }, [\n        E\n    ], s);\n    let X = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"Ve.useCallback[X]\": ()=>{\n            if (!(!b.current || !d.current) && !Q.current) {\n                U.current(d.current);\n                let p = m || n, R = h(d.current, t || e || \"\", r || a || \"\", p || \"\");\n                o.current = d.current?.editor.create(b.current, {\n                    model: R,\n                    automaticLayout: !0,\n                    ...x\n                }, P), y && o.current.restoreViewState(_.get(p)), d.current.editor.setTheme(E), g !== void 0 && o.current.revealLine(g), u(!0), Q.current = !0;\n            }\n        }\n    }[\"Ve.useCallback[X]\"], [\n        e,\n        r,\n        n,\n        t,\n        a,\n        m,\n        x,\n        P,\n        y,\n        E,\n        g\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"Ve.useEffect\": ()=>{\n            s && L.current(o.current, d.current);\n        }\n    }[\"Ve.useEffect\"], [\n        s\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"Ve.useEffect\": ()=>{\n            !c && !s && X();\n        }\n    }[\"Ve.useEffect\"], [\n        c,\n        s,\n        X\n    ]), i.current = t, (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"Ve.useEffect\": ()=>{\n            s && O && (I.current?.dispose(), I.current = o.current?.onDidChangeModelContent({\n                \"Ve.useEffect\": (p)=>{\n                    B.current || O(o.current.getValue(), p);\n                }\n            }[\"Ve.useEffect\"]));\n        }\n    }[\"Ve.useEffect\"], [\n        s,\n        O\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"Ve.useEffect\": ()=>{\n            if (s) {\n                let p = d.current.editor.onDidChangeMarkers({\n                    \"Ve.useEffect.p\": (R)=>{\n                        let G = o.current.getModel()?.uri;\n                        if (G && R.find({\n                            \"Ve.useEffect.p\": (J)=>J.path === G.path\n                        }[\"Ve.useEffect.p\"])) {\n                            let J = d.current.editor.getModelMarkers({\n                                resource: G\n                            });\n                            T?.(J);\n                        }\n                    }\n                }[\"Ve.useEffect.p\"]);\n                return ({\n                    \"Ve.useEffect\": ()=>{\n                        p?.dispose();\n                    }\n                })[\"Ve.useEffect\"];\n            }\n            return ({\n                \"Ve.useEffect\": ()=>{}\n            })[\"Ve.useEffect\"];\n        }\n    }[\"Ve.useEffect\"], [\n        s,\n        T\n    ]);\n    function pe() {\n        I.current?.dispose(), V ? y && _.set(m, o.current.saveViewState()) : o.current.getModel()?.dispose(), o.current.dispose();\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(H, {\n        width: z,\n        height: F,\n        isEditorReady: s,\n        loading: N,\n        _ref: b,\n        className: j,\n        wrapperProps: A\n    });\n}\nvar fe = Ve;\nvar de = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(fe);\nvar Ft = de;\nconst getDefaultValue = (language)=>{\n    switch(language){\n        case 'typescript':\n        case 'tsx':\n        case 'javascript':\n        case 'java':\n            return `// Welcome to Codeium Editor!\n// Press Enter and use Tab to accept AI suggestions. Here's an example:\n\n// fib(n) function to calculate the n-th fibonacci number`;\n        case 'python':\n            return `# Welcome to Codeium Editor!\n# Press Enter and use Tab to accept AI suggestions. Here's an example:\n\n# fib(n) function to calculate the n-th fibonacci number`;\n        case 'css':\n            return `/* Welcome to Codeium Editor!\nPress Enter and use Tab to accept AI suggestions. Here's an example:*/\n\n/* .action-button class with a hover effect. */`;\n        default:\n            return '';\n    }\n};\n// Copyright Exafunction, Inc.\n/**\n * @generated from enum exa.codeium_common_pb.ExperimentKey\n */ var ExperimentKey;\n(function(ExperimentKey) {\n    /**\n     * @generated from enum value: UNSPECIFIED = 0;\n     */ ExperimentKey[ExperimentKey[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from enum value: JUPYTER_FORMAT = 77;\n     */ ExperimentKey[ExperimentKey[\"JUPYTER_FORMAT\"] = 77] = \"JUPYTER_FORMAT\";\n})(ExperimentKey || (ExperimentKey = {}));\n// Retrieve enum metadata with: proto3.getEnumType(ExperimentKey)\nproto3.util.setEnumType(ExperimentKey, \"exa.codeium_common_pb.ExperimentKey\", [\n    {\n        no: 0,\n        name: \"UNSPECIFIED\"\n    },\n    {\n        no: 77,\n        name: \"JUPYTER_FORMAT\"\n    }\n]);\n/**\n * Authentication source for users on the cloud service.\n *\n * @generated from enum exa.codeium_common_pb.AuthSource\n */ var AuthSource;\n(function(AuthSource) {\n    /**\n     * @generated from enum value: AUTH_SOURCE_CODEIUM = 0;\n     */ AuthSource[AuthSource[\"CODEIUM\"] = 0] = \"CODEIUM\";\n})(AuthSource || (AuthSource = {}));\n// Retrieve enum metadata with: proto3.getEnumType(AuthSource)\nproto3.util.setEnumType(AuthSource, \"exa.codeium_common_pb.AuthSource\", [\n    {\n        no: 0,\n        name: \"AUTH_SOURCE_CODEIUM\"\n    }\n]);\n/**\n * @generated from enum exa.codeium_common_pb.EventType\n */ var EventType;\n(function(EventType) {\n    /**\n     * @generated from enum value: EVENT_TYPE_UNSPECIFIED = 0;\n     */ EventType[EventType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from enum value: EVENT_TYPE_ENABLE_CODEIUM = 1;\n     */ EventType[EventType[\"ENABLE_CODEIUM\"] = 1] = \"ENABLE_CODEIUM\";\n    /**\n     * @generated from enum value: EVENT_TYPE_DISABLE_CODEIUM = 2;\n     */ EventType[EventType[\"DISABLE_CODEIUM\"] = 2] = \"DISABLE_CODEIUM\";\n    /**\n     * @generated from enum value: EVENT_TYPE_SHOW_PREVIOUS_COMPLETION = 3;\n     */ EventType[EventType[\"SHOW_PREVIOUS_COMPLETION\"] = 3] = \"SHOW_PREVIOUS_COMPLETION\";\n    /**\n     * @generated from enum value: EVENT_TYPE_SHOW_NEXT_COMPLETION = 4;\n     */ EventType[EventType[\"SHOW_NEXT_COMPLETION\"] = 4] = \"SHOW_NEXT_COMPLETION\";\n})(EventType || (EventType = {}));\n// Retrieve enum metadata with: proto3.getEnumType(EventType)\nproto3.util.setEnumType(EventType, \"exa.codeium_common_pb.EventType\", [\n    {\n        no: 0,\n        name: \"EVENT_TYPE_UNSPECIFIED\"\n    },\n    {\n        no: 1,\n        name: \"EVENT_TYPE_ENABLE_CODEIUM\"\n    },\n    {\n        no: 2,\n        name: \"EVENT_TYPE_DISABLE_CODEIUM\"\n    },\n    {\n        no: 3,\n        name: \"EVENT_TYPE_SHOW_PREVIOUS_COMPLETION\"\n    },\n    {\n        no: 4,\n        name: \"EVENT_TYPE_SHOW_NEXT_COMPLETION\"\n    }\n]);\n/**\n * @generated from enum exa.codeium_common_pb.CompletionSource\n */ var CompletionSource;\n(function(CompletionSource) {\n    /**\n     * @generated from enum value: COMPLETION_SOURCE_UNSPECIFIED = 0;\n     */ CompletionSource[CompletionSource[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from enum value: COMPLETION_SOURCE_TYPING_AS_SUGGESTED = 1;\n     */ CompletionSource[CompletionSource[\"TYPING_AS_SUGGESTED\"] = 1] = \"TYPING_AS_SUGGESTED\";\n    /**\n     * @generated from enum value: COMPLETION_SOURCE_CACHE = 2;\n     */ CompletionSource[CompletionSource[\"CACHE\"] = 2] = \"CACHE\";\n    /**\n     * @generated from enum value: COMPLETION_SOURCE_NETWORK = 3;\n     */ CompletionSource[CompletionSource[\"NETWORK\"] = 3] = \"NETWORK\";\n})(CompletionSource || (CompletionSource = {}));\n// Retrieve enum metadata with: proto3.getEnumType(CompletionSource)\nproto3.util.setEnumType(CompletionSource, \"exa.codeium_common_pb.CompletionSource\", [\n    {\n        no: 0,\n        name: \"COMPLETION_SOURCE_UNSPECIFIED\"\n    },\n    {\n        no: 1,\n        name: \"COMPLETION_SOURCE_TYPING_AS_SUGGESTED\"\n    },\n    {\n        no: 2,\n        name: \"COMPLETION_SOURCE_CACHE\"\n    },\n    {\n        no: 3,\n        name: \"COMPLETION_SOURCE_NETWORK\"\n    }\n]);\n/**\n * Every time this list is updated, we should be redeploying the API server\n * since it uses the string representation for BQ.\n *\n * @generated from enum exa.codeium_common_pb.Language\n */ var Language;\n(function(Language) {\n    /**\n     * @generated from enum value: LANGUAGE_UNSPECIFIED = 0;\n     */ Language[Language[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from enum value: LANGUAGE_C = 1;\n     */ Language[Language[\"C\"] = 1] = \"C\";\n    /**\n     * @generated from enum value: LANGUAGE_CLOJURE = 2;\n     */ Language[Language[\"CLOJURE\"] = 2] = \"CLOJURE\";\n    /**\n     * @generated from enum value: LANGUAGE_COFFEESCRIPT = 3;\n     */ Language[Language[\"COFFEESCRIPT\"] = 3] = \"COFFEESCRIPT\";\n    /**\n     * @generated from enum value: LANGUAGE_CPP = 4;\n     */ Language[Language[\"CPP\"] = 4] = \"CPP\";\n    /**\n     * @generated from enum value: LANGUAGE_CSHARP = 5;\n     */ Language[Language[\"CSHARP\"] = 5] = \"CSHARP\";\n    /**\n     * @generated from enum value: LANGUAGE_CSS = 6;\n     */ Language[Language[\"CSS\"] = 6] = \"CSS\";\n    /**\n     * @generated from enum value: LANGUAGE_CUDACPP = 7;\n     */ Language[Language[\"CUDACPP\"] = 7] = \"CUDACPP\";\n    /**\n     * @generated from enum value: LANGUAGE_DOCKERFILE = 8;\n     */ Language[Language[\"DOCKERFILE\"] = 8] = \"DOCKERFILE\";\n    /**\n     * @generated from enum value: LANGUAGE_GO = 9;\n     */ Language[Language[\"GO\"] = 9] = \"GO\";\n    /**\n     * @generated from enum value: LANGUAGE_GROOVY = 10;\n     */ Language[Language[\"GROOVY\"] = 10] = \"GROOVY\";\n    /**\n     * @generated from enum value: LANGUAGE_HANDLEBARS = 11;\n     */ Language[Language[\"HANDLEBARS\"] = 11] = \"HANDLEBARS\";\n    /**\n     * @generated from enum value: LANGUAGE_HASKELL = 12;\n     */ Language[Language[\"HASKELL\"] = 12] = \"HASKELL\";\n    /**\n     * @generated from enum value: LANGUAGE_HCL = 13;\n     */ Language[Language[\"HCL\"] = 13] = \"HCL\";\n    /**\n     * @generated from enum value: LANGUAGE_HTML = 14;\n     */ Language[Language[\"HTML\"] = 14] = \"HTML\";\n    /**\n     * @generated from enum value: LANGUAGE_INI = 15;\n     */ Language[Language[\"INI\"] = 15] = \"INI\";\n    /**\n     * @generated from enum value: LANGUAGE_JAVA = 16;\n     */ Language[Language[\"JAVA\"] = 16] = \"JAVA\";\n    /**\n     * @generated from enum value: LANGUAGE_JAVASCRIPT = 17;\n     */ Language[Language[\"JAVASCRIPT\"] = 17] = \"JAVASCRIPT\";\n    /**\n     * @generated from enum value: LANGUAGE_JSON = 18;\n     */ Language[Language[\"JSON\"] = 18] = \"JSON\";\n    /**\n     * @generated from enum value: LANGUAGE_JULIA = 19;\n     */ Language[Language[\"JULIA\"] = 19] = \"JULIA\";\n    /**\n     * @generated from enum value: LANGUAGE_KOTLIN = 20;\n     */ Language[Language[\"KOTLIN\"] = 20] = \"KOTLIN\";\n    /**\n     * @generated from enum value: LANGUAGE_LATEX = 21;\n     */ Language[Language[\"LATEX\"] = 21] = \"LATEX\";\n    /**\n     * @generated from enum value: LANGUAGE_LESS = 22;\n     */ Language[Language[\"LESS\"] = 22] = \"LESS\";\n    /**\n     * @generated from enum value: LANGUAGE_LUA = 23;\n     */ Language[Language[\"LUA\"] = 23] = \"LUA\";\n    /**\n     * @generated from enum value: LANGUAGE_MAKEFILE = 24;\n     */ Language[Language[\"MAKEFILE\"] = 24] = \"MAKEFILE\";\n    /**\n     * @generated from enum value: LANGUAGE_MARKDOWN = 25;\n     */ Language[Language[\"MARKDOWN\"] = 25] = \"MARKDOWN\";\n    /**\n     * @generated from enum value: LANGUAGE_OBJECTIVEC = 26;\n     */ Language[Language[\"OBJECTIVEC\"] = 26] = \"OBJECTIVEC\";\n    /**\n     * @generated from enum value: LANGUAGE_OBJECTIVECPP = 27;\n     */ Language[Language[\"OBJECTIVECPP\"] = 27] = \"OBJECTIVECPP\";\n    /**\n     * @generated from enum value: LANGUAGE_PERL = 28;\n     */ Language[Language[\"PERL\"] = 28] = \"PERL\";\n    /**\n     * @generated from enum value: LANGUAGE_PHP = 29;\n     */ Language[Language[\"PHP\"] = 29] = \"PHP\";\n    /**\n     * @generated from enum value: LANGUAGE_PLAINTEXT = 30;\n     */ Language[Language[\"PLAINTEXT\"] = 30] = \"PLAINTEXT\";\n    /**\n     * @generated from enum value: LANGUAGE_PROTOBUF = 31;\n     */ Language[Language[\"PROTOBUF\"] = 31] = \"PROTOBUF\";\n    /**\n     * @generated from enum value: LANGUAGE_PBTXT = 32;\n     */ Language[Language[\"PBTXT\"] = 32] = \"PBTXT\";\n    /**\n     * @generated from enum value: LANGUAGE_PYTHON = 33;\n     */ Language[Language[\"PYTHON\"] = 33] = \"PYTHON\";\n    /**\n     * @generated from enum value: LANGUAGE_R = 34;\n     */ Language[Language[\"R\"] = 34] = \"R\";\n    /**\n     * @generated from enum value: LANGUAGE_RUBY = 35;\n     */ Language[Language[\"RUBY\"] = 35] = \"RUBY\";\n    /**\n     * @generated from enum value: LANGUAGE_RUST = 36;\n     */ Language[Language[\"RUST\"] = 36] = \"RUST\";\n    /**\n     * @generated from enum value: LANGUAGE_SASS = 37;\n     */ Language[Language[\"SASS\"] = 37] = \"SASS\";\n    /**\n     * @generated from enum value: LANGUAGE_SCALA = 38;\n     */ Language[Language[\"SCALA\"] = 38] = \"SCALA\";\n    /**\n     * @generated from enum value: LANGUAGE_SCSS = 39;\n     */ Language[Language[\"SCSS\"] = 39] = \"SCSS\";\n    /**\n     * @generated from enum value: LANGUAGE_SHELL = 40;\n     */ Language[Language[\"SHELL\"] = 40] = \"SHELL\";\n    /**\n     * @generated from enum value: LANGUAGE_SQL = 41;\n     */ Language[Language[\"SQL\"] = 41] = \"SQL\";\n    /**\n     * @generated from enum value: LANGUAGE_STARLARK = 42;\n     */ Language[Language[\"STARLARK\"] = 42] = \"STARLARK\";\n    /**\n     * @generated from enum value: LANGUAGE_SWIFT = 43;\n     */ Language[Language[\"SWIFT\"] = 43] = \"SWIFT\";\n    /**\n     * @generated from enum value: LANGUAGE_TSX = 44;\n     */ Language[Language[\"TSX\"] = 44] = \"TSX\";\n    /**\n     * @generated from enum value: LANGUAGE_TYPESCRIPT = 45;\n     */ Language[Language[\"TYPESCRIPT\"] = 45] = \"TYPESCRIPT\";\n    /**\n     * @generated from enum value: LANGUAGE_VISUALBASIC = 46;\n     */ Language[Language[\"VISUALBASIC\"] = 46] = \"VISUALBASIC\";\n    /**\n     * @generated from enum value: LANGUAGE_VUE = 47;\n     */ Language[Language[\"VUE\"] = 47] = \"VUE\";\n    /**\n     * @generated from enum value: LANGUAGE_XML = 48;\n     */ Language[Language[\"XML\"] = 48] = \"XML\";\n    /**\n     * @generated from enum value: LANGUAGE_XSL = 49;\n     */ Language[Language[\"XSL\"] = 49] = \"XSL\";\n    /**\n     * @generated from enum value: LANGUAGE_YAML = 50;\n     */ Language[Language[\"YAML\"] = 50] = \"YAML\";\n    /**\n     * @generated from enum value: LANGUAGE_SVELTE = 51;\n     */ Language[Language[\"SVELTE\"] = 51] = \"SVELTE\";\n    /**\n     * @generated from enum value: LANGUAGE_TOML = 52;\n     */ Language[Language[\"TOML\"] = 52] = \"TOML\";\n    /**\n     * @generated from enum value: LANGUAGE_DART = 53;\n     */ Language[Language[\"DART\"] = 53] = \"DART\";\n    /**\n     * @generated from enum value: LANGUAGE_RST = 54;\n     */ Language[Language[\"RST\"] = 54] = \"RST\";\n    /**\n     * @generated from enum value: LANGUAGE_OCAML = 55;\n     */ Language[Language[\"OCAML\"] = 55] = \"OCAML\";\n    /**\n     * @generated from enum value: LANGUAGE_CMAKE = 56;\n     */ Language[Language[\"CMAKE\"] = 56] = \"CMAKE\";\n    /**\n     * @generated from enum value: LANGUAGE_PASCAL = 57;\n     */ Language[Language[\"PASCAL\"] = 57] = \"PASCAL\";\n    /**\n     * @generated from enum value: LANGUAGE_ELIXIR = 58;\n     */ Language[Language[\"ELIXIR\"] = 58] = \"ELIXIR\";\n    /**\n     * @generated from enum value: LANGUAGE_FSHARP = 59;\n     */ Language[Language[\"FSHARP\"] = 59] = \"FSHARP\";\n    /**\n     * @generated from enum value: LANGUAGE_LISP = 60;\n     */ Language[Language[\"LISP\"] = 60] = \"LISP\";\n    /**\n     * @generated from enum value: LANGUAGE_MATLAB = 61;\n     */ Language[Language[\"MATLAB\"] = 61] = \"MATLAB\";\n    /**\n     * @generated from enum value: LANGUAGE_POWERSHELL = 62;\n     */ Language[Language[\"POWERSHELL\"] = 62] = \"POWERSHELL\";\n    /**\n     * @generated from enum value: LANGUAGE_SOLIDITY = 63;\n     */ Language[Language[\"SOLIDITY\"] = 63] = \"SOLIDITY\";\n    /**\n     * @generated from enum value: LANGUAGE_ADA = 64;\n     */ Language[Language[\"ADA\"] = 64] = \"ADA\";\n    /**\n     * @generated from enum value: LANGUAGE_OCAML_INTERFACE = 65;\n     */ Language[Language[\"OCAML_INTERFACE\"] = 65] = \"OCAML_INTERFACE\";\n})(Language || (Language = {}));\n// Retrieve enum metadata with: proto3.getEnumType(Language)\nproto3.util.setEnumType(Language, \"exa.codeium_common_pb.Language\", [\n    {\n        no: 0,\n        name: \"LANGUAGE_UNSPECIFIED\"\n    },\n    {\n        no: 1,\n        name: \"LANGUAGE_C\"\n    },\n    {\n        no: 2,\n        name: \"LANGUAGE_CLOJURE\"\n    },\n    {\n        no: 3,\n        name: \"LANGUAGE_COFFEESCRIPT\"\n    },\n    {\n        no: 4,\n        name: \"LANGUAGE_CPP\"\n    },\n    {\n        no: 5,\n        name: \"LANGUAGE_CSHARP\"\n    },\n    {\n        no: 6,\n        name: \"LANGUAGE_CSS\"\n    },\n    {\n        no: 7,\n        name: \"LANGUAGE_CUDACPP\"\n    },\n    {\n        no: 8,\n        name: \"LANGUAGE_DOCKERFILE\"\n    },\n    {\n        no: 9,\n        name: \"LANGUAGE_GO\"\n    },\n    {\n        no: 10,\n        name: \"LANGUAGE_GROOVY\"\n    },\n    {\n        no: 11,\n        name: \"LANGUAGE_HANDLEBARS\"\n    },\n    {\n        no: 12,\n        name: \"LANGUAGE_HASKELL\"\n    },\n    {\n        no: 13,\n        name: \"LANGUAGE_HCL\"\n    },\n    {\n        no: 14,\n        name: \"LANGUAGE_HTML\"\n    },\n    {\n        no: 15,\n        name: \"LANGUAGE_INI\"\n    },\n    {\n        no: 16,\n        name: \"LANGUAGE_JAVA\"\n    },\n    {\n        no: 17,\n        name: \"LANGUAGE_JAVASCRIPT\"\n    },\n    {\n        no: 18,\n        name: \"LANGUAGE_JSON\"\n    },\n    {\n        no: 19,\n        name: \"LANGUAGE_JULIA\"\n    },\n    {\n        no: 20,\n        name: \"LANGUAGE_KOTLIN\"\n    },\n    {\n        no: 21,\n        name: \"LANGUAGE_LATEX\"\n    },\n    {\n        no: 22,\n        name: \"LANGUAGE_LESS\"\n    },\n    {\n        no: 23,\n        name: \"LANGUAGE_LUA\"\n    },\n    {\n        no: 24,\n        name: \"LANGUAGE_MAKEFILE\"\n    },\n    {\n        no: 25,\n        name: \"LANGUAGE_MARKDOWN\"\n    },\n    {\n        no: 26,\n        name: \"LANGUAGE_OBJECTIVEC\"\n    },\n    {\n        no: 27,\n        name: \"LANGUAGE_OBJECTIVECPP\"\n    },\n    {\n        no: 28,\n        name: \"LANGUAGE_PERL\"\n    },\n    {\n        no: 29,\n        name: \"LANGUAGE_PHP\"\n    },\n    {\n        no: 30,\n        name: \"LANGUAGE_PLAINTEXT\"\n    },\n    {\n        no: 31,\n        name: \"LANGUAGE_PROTOBUF\"\n    },\n    {\n        no: 32,\n        name: \"LANGUAGE_PBTXT\"\n    },\n    {\n        no: 33,\n        name: \"LANGUAGE_PYTHON\"\n    },\n    {\n        no: 34,\n        name: \"LANGUAGE_R\"\n    },\n    {\n        no: 35,\n        name: \"LANGUAGE_RUBY\"\n    },\n    {\n        no: 36,\n        name: \"LANGUAGE_RUST\"\n    },\n    {\n        no: 37,\n        name: \"LANGUAGE_SASS\"\n    },\n    {\n        no: 38,\n        name: \"LANGUAGE_SCALA\"\n    },\n    {\n        no: 39,\n        name: \"LANGUAGE_SCSS\"\n    },\n    {\n        no: 40,\n        name: \"LANGUAGE_SHELL\"\n    },\n    {\n        no: 41,\n        name: \"LANGUAGE_SQL\"\n    },\n    {\n        no: 42,\n        name: \"LANGUAGE_STARLARK\"\n    },\n    {\n        no: 43,\n        name: \"LANGUAGE_SWIFT\"\n    },\n    {\n        no: 44,\n        name: \"LANGUAGE_TSX\"\n    },\n    {\n        no: 45,\n        name: \"LANGUAGE_TYPESCRIPT\"\n    },\n    {\n        no: 46,\n        name: \"LANGUAGE_VISUALBASIC\"\n    },\n    {\n        no: 47,\n        name: \"LANGUAGE_VUE\"\n    },\n    {\n        no: 48,\n        name: \"LANGUAGE_XML\"\n    },\n    {\n        no: 49,\n        name: \"LANGUAGE_XSL\"\n    },\n    {\n        no: 50,\n        name: \"LANGUAGE_YAML\"\n    },\n    {\n        no: 51,\n        name: \"LANGUAGE_SVELTE\"\n    },\n    {\n        no: 52,\n        name: \"LANGUAGE_TOML\"\n    },\n    {\n        no: 53,\n        name: \"LANGUAGE_DART\"\n    },\n    {\n        no: 54,\n        name: \"LANGUAGE_RST\"\n    },\n    {\n        no: 55,\n        name: \"LANGUAGE_OCAML\"\n    },\n    {\n        no: 56,\n        name: \"LANGUAGE_CMAKE\"\n    },\n    {\n        no: 57,\n        name: \"LANGUAGE_PASCAL\"\n    },\n    {\n        no: 58,\n        name: \"LANGUAGE_ELIXIR\"\n    },\n    {\n        no: 59,\n        name: \"LANGUAGE_FSHARP\"\n    },\n    {\n        no: 60,\n        name: \"LANGUAGE_LISP\"\n    },\n    {\n        no: 61,\n        name: \"LANGUAGE_MATLAB\"\n    },\n    {\n        no: 62,\n        name: \"LANGUAGE_POWERSHELL\"\n    },\n    {\n        no: 63,\n        name: \"LANGUAGE_SOLIDITY\"\n    },\n    {\n        no: 64,\n        name: \"LANGUAGE_ADA\"\n    },\n    {\n        no: 65,\n        name: \"LANGUAGE_OCAML_INTERFACE\"\n    }\n]);\n/**\n * Next ID: 12, Previous field: entropy.\n *\n * @generated from message exa.codeium_common_pb.Completion\n */ class Completion extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: string completion_id = 1;\n         */ this.completionId = \"\";\n        /**\n         * @generated from field: string text = 2;\n         */ this.text = \"\";\n        /**\n         * @generated from field: string prefix = 3;\n         */ this.prefix = \"\";\n        /**\n         * @generated from field: string stop = 4;\n         */ this.stop = \"\";\n        /**\n         * @generated from field: double score = 5;\n         */ this.score = 0;\n        /**\n         * @generated from field: repeated uint64 tokens = 6;\n         */ this.tokens = [];\n        /**\n         * @generated from field: repeated string decoded_tokens = 7;\n         */ this.decodedTokens = [];\n        /**\n         * @generated from field: repeated double probabilities = 8;\n         */ this.probabilities = [];\n        /**\n         * @generated from field: repeated double adjusted_probabilities = 9;\n         */ this.adjustedProbabilities = [];\n        /**\n         * @generated from field: uint64 generated_length = 10;\n         */ this.generatedLength = protoInt64.zero;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Completion().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Completion().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Completion().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Completion, a, b);\n    }\n}\nCompletion.runtime = proto3;\nCompletion.typeName = \"exa.codeium_common_pb.Completion\";\nCompletion.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"completion_id\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 2,\n            name: \"text\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 3,\n            name: \"prefix\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 4,\n            name: \"stop\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 5,\n            name: \"score\",\n            kind: \"scalar\",\n            T: 1 /* ScalarType.DOUBLE */ \n        },\n        {\n            no: 6,\n            name: \"tokens\",\n            kind: \"scalar\",\n            T: 4 /* ScalarType.UINT64 */ ,\n            repeated: true\n        },\n        {\n            no: 7,\n            name: \"decoded_tokens\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ ,\n            repeated: true\n        },\n        {\n            no: 8,\n            name: \"probabilities\",\n            kind: \"scalar\",\n            T: 1 /* ScalarType.DOUBLE */ ,\n            repeated: true\n        },\n        {\n            no: 9,\n            name: \"adjusted_probabilities\",\n            kind: \"scalar\",\n            T: 1 /* ScalarType.DOUBLE */ ,\n            repeated: true\n        },\n        {\n            no: 10,\n            name: \"generated_length\",\n            kind: \"scalar\",\n            T: 4 /* ScalarType.UINT64 */ \n        }\n    ]);\n/**\n * Next ID: 15, Previous field: url.\n *\n * @generated from message exa.codeium_common_pb.Metadata\n */ class Metadata extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: string ide_name = 1;\n         */ this.ideName = \"\";\n        /**\n         * @generated from field: string ide_version = 7;\n         */ this.ideVersion = \"\";\n        /**\n         * @generated from field: string extension_name = 12;\n         */ this.extensionName = \"\";\n        /**\n         * @generated from field: string extension_version = 2;\n         */ this.extensionVersion = \"\";\n        /**\n         * @generated from field: string api_key = 3;\n         */ this.apiKey = \"\";\n        /**\n         * Regex derived from https://stackoverflow.com/a/48300605.\n         * TODO(prem): Should this be mandatory?\n         *\n         * @generated from field: string locale = 4;\n         */ this.locale = \"\";\n        /**\n         * UID identifying a single session for the given user.\n         *\n         * @generated from field: string session_id = 10;\n         */ this.sessionId = \"\";\n        /**\n         * Used purely in language server to cancel in flight requests.\n         * If request_id is 0, then the request is not cancelable.\n         * This should be a strictly monotonically increasing number\n         * for the duration of a session.\n         *\n         * @generated from field: uint64 request_id = 9;\n         */ this.requestId = protoInt64.zero;\n        /**\n         * Browser-specific information.\n         *\n         * @generated from field: string user_agent = 13;\n         */ this.userAgent = \"\";\n        /**\n         * @generated from field: string url = 14;\n         */ this.url = \"\";\n        /**\n         * Authentication source information.\n         *\n         * @generated from field: exa.codeium_common_pb.AuthSource auth_source = 15;\n         */ this.authSource = AuthSource.CODEIUM;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Metadata().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Metadata().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Metadata().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Metadata, a, b);\n    }\n}\nMetadata.runtime = proto3;\nMetadata.typeName = \"exa.codeium_common_pb.Metadata\";\nMetadata.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"ide_name\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 7,\n            name: \"ide_version\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 12,\n            name: \"extension_name\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 2,\n            name: \"extension_version\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 3,\n            name: \"api_key\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 4,\n            name: \"locale\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 10,\n            name: \"session_id\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 9,\n            name: \"request_id\",\n            kind: \"scalar\",\n            T: 4 /* ScalarType.UINT64 */ \n        },\n        {\n            no: 13,\n            name: \"user_agent\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 14,\n            name: \"url\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 15,\n            name: \"auth_source\",\n            kind: \"enum\",\n            T: proto3.getEnumType(AuthSource)\n        }\n    ]);\n/**\n * Next ID: 3, Previous field: insert_spaces.\n *\n * @generated from message exa.codeium_common_pb.EditorOptions\n */ class EditorOptions extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: uint64 tab_size = 1;\n         */ this.tabSize = protoInt64.zero;\n        /**\n         * @generated from field: bool insert_spaces = 2;\n         */ this.insertSpaces = false;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EditorOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EditorOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EditorOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(EditorOptions, a, b);\n    }\n}\nEditorOptions.runtime = proto3;\nEditorOptions.typeName = \"exa.codeium_common_pb.EditorOptions\";\nEditorOptions.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"tab_size\",\n            kind: \"scalar\",\n            T: 4 /* ScalarType.UINT64 */ \n        },\n        {\n            no: 2,\n            name: \"insert_spaces\",\n            kind: \"scalar\",\n            T: 8 /* ScalarType.BOOL */ \n        }\n    ]);\n/**\n * @generated from message exa.codeium_common_pb.Event\n */ class Event extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: exa.codeium_common_pb.EventType event_type = 1;\n         */ this.eventType = EventType.UNSPECIFIED;\n        /**\n         * @generated from field: string event_json = 2;\n         */ this.eventJson = \"\";\n        /**\n         * @generated from field: int64 timestamp_unix_ms = 3;\n         */ this.timestampUnixMs = protoInt64.zero;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Event().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Event().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Event().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Event, a, b);\n    }\n}\nEvent.runtime = proto3;\nEvent.typeName = \"exa.codeium_common_pb.Event\";\nEvent.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"event_type\",\n            kind: \"enum\",\n            T: proto3.getEnumType(EventType)\n        },\n        {\n            no: 2,\n            name: \"event_json\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 3,\n            name: \"timestamp_unix_ms\",\n            kind: \"scalar\",\n            T: 3 /* ScalarType.INT64 */ \n        }\n    ]);\n// Copyright Exafunction, Inc.\n/**\n * @generated from enum exa.language_server_pb.CodeiumState\n */ var CodeiumState;\n(function(CodeiumState) {\n    /**\n     * @generated from enum value: CODEIUM_STATE_UNSPECIFIED = 0;\n     */ CodeiumState[CodeiumState[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from enum value: CODEIUM_STATE_INACTIVE = 1;\n     */ CodeiumState[CodeiumState[\"INACTIVE\"] = 1] = \"INACTIVE\";\n    /**\n     * @generated from enum value: CODEIUM_STATE_PROCESSING = 2;\n     */ CodeiumState[CodeiumState[\"PROCESSING\"] = 2] = \"PROCESSING\";\n    /**\n     * @generated from enum value: CODEIUM_STATE_SUCCESS = 3;\n     */ CodeiumState[CodeiumState[\"SUCCESS\"] = 3] = \"SUCCESS\";\n    /**\n     * @generated from enum value: CODEIUM_STATE_WARNING = 4;\n     */ CodeiumState[CodeiumState[\"WARNING\"] = 4] = \"WARNING\";\n    /**\n     * @generated from enum value: CODEIUM_STATE_ERROR = 5;\n     */ CodeiumState[CodeiumState[\"ERROR\"] = 5] = \"ERROR\";\n})(CodeiumState || (CodeiumState = {}));\n// Retrieve enum metadata with: proto3.getEnumType(CodeiumState)\nproto3.util.setEnumType(CodeiumState, \"exa.language_server_pb.CodeiumState\", [\n    {\n        no: 0,\n        name: \"CODEIUM_STATE_UNSPECIFIED\"\n    },\n    {\n        no: 1,\n        name: \"CODEIUM_STATE_INACTIVE\"\n    },\n    {\n        no: 2,\n        name: \"CODEIUM_STATE_PROCESSING\"\n    },\n    {\n        no: 3,\n        name: \"CODEIUM_STATE_SUCCESS\"\n    },\n    {\n        no: 4,\n        name: \"CODEIUM_STATE_WARNING\"\n    },\n    {\n        no: 5,\n        name: \"CODEIUM_STATE_ERROR\"\n    }\n]);\n/**\n * @generated from enum exa.language_server_pb.LineType\n */ var LineType;\n(function(LineType) {\n    /**\n     * @generated from enum value: LINE_TYPE_UNSPECIFIED = 0;\n     */ LineType[LineType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from enum value: LINE_TYPE_SINGLE = 1;\n     */ LineType[LineType[\"SINGLE\"] = 1] = \"SINGLE\";\n    /**\n     * @generated from enum value: LINE_TYPE_MULTI = 2;\n     */ LineType[LineType[\"MULTI\"] = 2] = \"MULTI\";\n})(LineType || (LineType = {}));\n// Retrieve enum metadata with: proto3.getEnumType(LineType)\nproto3.util.setEnumType(LineType, \"exa.language_server_pb.LineType\", [\n    {\n        no: 0,\n        name: \"LINE_TYPE_UNSPECIFIED\"\n    },\n    {\n        no: 1,\n        name: \"LINE_TYPE_SINGLE\"\n    },\n    {\n        no: 2,\n        name: \"LINE_TYPE_MULTI\"\n    }\n]);\n/**\n * @generated from enum exa.language_server_pb.CompletionPartType\n */ var CompletionPartType;\n(function(CompletionPartType) {\n    /**\n     * @generated from enum value: COMPLETION_PART_TYPE_UNSPECIFIED = 0;\n     */ CompletionPartType[CompletionPartType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * Single-line completion parts that appear within an existing line of text.\n     *\n     * @generated from enum value: COMPLETION_PART_TYPE_INLINE = 1;\n     */ CompletionPartType[CompletionPartType[\"INLINE\"] = 1] = \"INLINE\";\n    /**\n     * Possibly multi-line completion parts that appear below an existing line of text.\n     *\n     * @generated from enum value: COMPLETION_PART_TYPE_BLOCK = 2;\n     */ CompletionPartType[CompletionPartType[\"BLOCK\"] = 2] = \"BLOCK\";\n    /**\n     * Like COMPLETION_PART_TYPE_INLINE, but overwrites the existing text.\n     *\n     * @generated from enum value: COMPLETION_PART_TYPE_INLINE_MASK = 3;\n     */ CompletionPartType[CompletionPartType[\"INLINE_MASK\"] = 3] = \"INLINE_MASK\";\n})(CompletionPartType || (CompletionPartType = {}));\n// Retrieve enum metadata with: proto3.getEnumType(CompletionPartType)\nproto3.util.setEnumType(CompletionPartType, \"exa.language_server_pb.CompletionPartType\", [\n    {\n        no: 0,\n        name: \"COMPLETION_PART_TYPE_UNSPECIFIED\"\n    },\n    {\n        no: 1,\n        name: \"COMPLETION_PART_TYPE_INLINE\"\n    },\n    {\n        no: 2,\n        name: \"COMPLETION_PART_TYPE_BLOCK\"\n    },\n    {\n        no: 3,\n        name: \"COMPLETION_PART_TYPE_INLINE_MASK\"\n    }\n]);\n/**\n * @generated from message exa.language_server_pb.MultilineConfig\n */ class MultilineConfig extends Message {\n    constructor(data){\n        super();\n        /**\n         * Multiline model threshold. 0-1, higher = more single line, lower = more multiline,\n         * 0.0 = only_multiline, default is 0.5\n         *\n         * @generated from field: float threshold = 1;\n         */ this.threshold = 0;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new MultilineConfig().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new MultilineConfig().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new MultilineConfig().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(MultilineConfig, a, b);\n    }\n}\nMultilineConfig.runtime = proto3;\nMultilineConfig.typeName = \"exa.language_server_pb.MultilineConfig\";\nMultilineConfig.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"threshold\",\n            kind: \"scalar\",\n            T: 2 /* ScalarType.FLOAT */ \n        }\n    ]);\n/**\n * Next ID: 9, Previous field: disable_cache.\n *\n * @generated from message exa.language_server_pb.GetCompletionsRequest\n */ class GetCompletionsRequest extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: repeated exa.language_server_pb.Document other_documents = 5;\n         */ this.otherDocuments = [];\n        /**\n         * @generated from field: string model_name = 10;\n         */ this.modelName = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new GetCompletionsRequest().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new GetCompletionsRequest().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new GetCompletionsRequest().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(GetCompletionsRequest, a, b);\n    }\n}\nGetCompletionsRequest.runtime = proto3;\nGetCompletionsRequest.typeName = \"exa.language_server_pb.GetCompletionsRequest\";\nGetCompletionsRequest.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"metadata\",\n            kind: \"message\",\n            T: Metadata\n        },\n        {\n            no: 2,\n            name: \"document\",\n            kind: \"message\",\n            T: Document$1\n        },\n        {\n            no: 3,\n            name: \"editor_options\",\n            kind: \"message\",\n            T: EditorOptions\n        },\n        {\n            no: 5,\n            name: \"other_documents\",\n            kind: \"message\",\n            T: Document$1,\n            repeated: true\n        },\n        {\n            no: 7,\n            name: \"experiment_config\",\n            kind: \"message\",\n            T: ExperimentConfig\n        },\n        {\n            no: 10,\n            name: \"model_name\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 13,\n            name: \"multiline_config\",\n            kind: \"message\",\n            T: MultilineConfig\n        }\n    ]);\n/**\n * Next ID: 5, Previous field: latency_info.\n *\n * @generated from message exa.language_server_pb.GetCompletionsResponse\n */ class GetCompletionsResponse extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: repeated exa.language_server_pb.CompletionItem completion_items = 2;\n         */ this.completionItems = [];\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new GetCompletionsResponse().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new GetCompletionsResponse().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new GetCompletionsResponse().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(GetCompletionsResponse, a, b);\n    }\n}\nGetCompletionsResponse.runtime = proto3;\nGetCompletionsResponse.typeName = \"exa.language_server_pb.GetCompletionsResponse\";\nGetCompletionsResponse.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"state\",\n            kind: \"message\",\n            T: State\n        },\n        {\n            no: 2,\n            name: \"completion_items\",\n            kind: \"message\",\n            T: CompletionItem,\n            repeated: true\n        }\n    ]);\n/**\n * Next ID: 3, Previous field: completion_id.\n *\n * @generated from message exa.language_server_pb.AcceptCompletionRequest\n */ class AcceptCompletionRequest extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: string completion_id = 2;\n         */ this.completionId = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new AcceptCompletionRequest().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new AcceptCompletionRequest().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new AcceptCompletionRequest().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(AcceptCompletionRequest, a, b);\n    }\n}\nAcceptCompletionRequest.runtime = proto3;\nAcceptCompletionRequest.typeName = \"exa.language_server_pb.AcceptCompletionRequest\";\nAcceptCompletionRequest.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"metadata\",\n            kind: \"message\",\n            T: Metadata\n        },\n        {\n            no: 2,\n            name: \"completion_id\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        }\n    ]);\n/**\n * Next ID: 1, Previous field: N/A.\n *\n * @generated from message exa.language_server_pb.AcceptCompletionResponse\n */ class AcceptCompletionResponse extends Message {\n    constructor(data){\n        super();\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new AcceptCompletionResponse().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new AcceptCompletionResponse().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new AcceptCompletionResponse().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(AcceptCompletionResponse, a, b);\n    }\n}\nAcceptCompletionResponse.runtime = proto3;\nAcceptCompletionResponse.typeName = \"exa.language_server_pb.AcceptCompletionResponse\";\nAcceptCompletionResponse.fields = proto3.util.newFieldList(()=>[]);\n/**\n * Next ID: 1, Previous field: N/A.\n *\n * @generated from message exa.language_server_pb.GetAuthTokenRequest\n */ class GetAuthTokenRequest extends Message {\n    constructor(data){\n        super();\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new GetAuthTokenRequest().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new GetAuthTokenRequest().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new GetAuthTokenRequest().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(GetAuthTokenRequest, a, b);\n    }\n}\nGetAuthTokenRequest.runtime = proto3;\nGetAuthTokenRequest.typeName = \"exa.language_server_pb.GetAuthTokenRequest\";\nGetAuthTokenRequest.fields = proto3.util.newFieldList(()=>[]);\n/**\n * Next ID: 3, Previous field: uuid.\n *\n * @generated from message exa.language_server_pb.GetAuthTokenResponse\n */ class GetAuthTokenResponse extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: string auth_token = 1;\n         */ this.authToken = \"\";\n        /**\n         * @generated from field: string uuid = 2;\n         */ this.uuid = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new GetAuthTokenResponse().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new GetAuthTokenResponse().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new GetAuthTokenResponse().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(GetAuthTokenResponse, a, b);\n    }\n}\nGetAuthTokenResponse.runtime = proto3;\nGetAuthTokenResponse.typeName = \"exa.language_server_pb.GetAuthTokenResponse\";\nGetAuthTokenResponse.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"auth_token\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 2,\n            name: \"uuid\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        }\n    ]);\n/**\n * @generated from message exa.language_server_pb.DocumentPosition\n */ class DocumentPosition extends Message {\n    constructor(data){\n        super();\n        /**\n         * 0-indexed. Measured in UTF-8 bytes.\n         *\n         * @generated from field: uint64 row = 1;\n         */ this.row = protoInt64.zero;\n        /**\n         * 0-indexed. Measured in UTF-8 bytes.\n         *\n         * @generated from field: uint64 col = 2;\n         */ this.col = protoInt64.zero;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new DocumentPosition().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new DocumentPosition().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new DocumentPosition().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(DocumentPosition, a, b);\n    }\n}\nDocumentPosition.runtime = proto3;\nDocumentPosition.typeName = \"exa.language_server_pb.DocumentPosition\";\nDocumentPosition.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"row\",\n            kind: \"scalar\",\n            T: 4 /* ScalarType.UINT64 */ \n        },\n        {\n            no: 2,\n            name: \"col\",\n            kind: \"scalar\",\n            T: 4 /* ScalarType.UINT64 */ \n        }\n    ]);\n/**\n * Next ID: 9, Previous field: cursor_position.\n *\n * @generated from message exa.language_server_pb.Document\n */ let Document$1 = class Document extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: string absolute_path = 1;\n         */ this.absolutePath = \"\";\n        /**\n         * Path relative to the root of the workspace.\n         *\n         * @generated from field: string relative_path = 2;\n         */ this.relativePath = \"\";\n        /**\n         * @generated from field: string text = 3;\n         */ this.text = \"\";\n        /**\n         * Language ID provided by the editor.\n         *\n         * @generated from field: string editor_language = 4;\n         */ this.editorLanguage = \"\";\n        /**\n         * Language enum standardized across editors.\n         *\n         * @generated from field: exa.codeium_common_pb.Language language = 5;\n         */ this.language = Language.UNSPECIFIED;\n        /**\n         * Measured in number of UTF-8 bytes.\n         *\n         * @generated from field: uint64 cursor_offset = 6;\n         */ this.cursorOffset = protoInt64.zero;\n        /**\n         * \\n or \\r\\n, if known.\n         *\n         * @generated from field: string line_ending = 7;\n         */ this.lineEnding = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Document().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Document().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Document().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Document, a, b);\n    }\n};\nDocument$1.runtime = proto3;\nDocument$1.typeName = \"exa.language_server_pb.Document\";\nDocument$1.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"absolute_path\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 2,\n            name: \"relative_path\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 3,\n            name: \"text\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 4,\n            name: \"editor_language\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 5,\n            name: \"language\",\n            kind: \"enum\",\n            T: proto3.getEnumType(Language)\n        },\n        {\n            no: 6,\n            name: \"cursor_offset\",\n            kind: \"scalar\",\n            T: 4 /* ScalarType.UINT64 */ \n        },\n        {\n            no: 8,\n            name: \"cursor_position\",\n            kind: \"message\",\n            T: DocumentPosition\n        },\n        {\n            no: 7,\n            name: \"line_ending\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        }\n    ]);\n/**\n * @generated from message exa.language_server_pb.ExperimentConfig\n */ class ExperimentConfig extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: repeated exa.codeium_common_pb.ExperimentKey force_enable_experiments = 1;\n         */ this.forceEnableExperiments = [];\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new ExperimentConfig().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new ExperimentConfig().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new ExperimentConfig().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(ExperimentConfig, a, b);\n    }\n}\nExperimentConfig.runtime = proto3;\nExperimentConfig.typeName = \"exa.language_server_pb.ExperimentConfig\";\nExperimentConfig.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"force_enable_experiments\",\n            kind: \"enum\",\n            T: proto3.getEnumType(ExperimentKey),\n            repeated: true\n        }\n    ]);\n/**\n * Next ID: 3, Previous field: message.\n *\n * @generated from message exa.language_server_pb.State\n */ class State extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: exa.language_server_pb.CodeiumState state = 1;\n         */ this.state = CodeiumState.UNSPECIFIED;\n        /**\n         * @generated from field: string message = 2;\n         */ this.message = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new State().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new State().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new State().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(State, a, b);\n    }\n}\nState.runtime = proto3;\nState.typeName = \"exa.language_server_pb.State\";\nState.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"state\",\n            kind: \"enum\",\n            T: proto3.getEnumType(CodeiumState)\n        },\n        {\n            no: 2,\n            name: \"message\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        }\n    ]);\n/**\n * Next ID: 5, Previous field: end_position.\n *\n * @generated from message exa.language_server_pb.Range\n */ let Range$1 = class Range extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: uint64 start_offset = 1;\n         */ this.startOffset = protoInt64.zero;\n        /**\n         * @generated from field: uint64 end_offset = 2;\n         */ this.endOffset = protoInt64.zero;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Range().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Range().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Range().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Range, a, b);\n    }\n};\nRange$1.runtime = proto3;\nRange$1.typeName = \"exa.language_server_pb.Range\";\nRange$1.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"start_offset\",\n            kind: \"scalar\",\n            T: 4 /* ScalarType.UINT64 */ \n        },\n        {\n            no: 2,\n            name: \"end_offset\",\n            kind: \"scalar\",\n            T: 4 /* ScalarType.UINT64 */ \n        },\n        {\n            no: 3,\n            name: \"start_position\",\n            kind: \"message\",\n            T: DocumentPosition\n        },\n        {\n            no: 4,\n            name: \"end_position\",\n            kind: \"message\",\n            T: DocumentPosition\n        }\n    ]);\n/**\n * @generated from message exa.language_server_pb.Suffix\n */ class Suffix extends Message {\n    constructor(data){\n        super();\n        /**\n         * Text to insert after the cursor when accepting the completion.\n         *\n         * @generated from field: string text = 1;\n         */ this.text = \"\";\n        /**\n         * Cursor position delta (as signed offset) from the end of the inserted\n         * completion (including the suffix).\n         *\n         * @generated from field: int64 delta_cursor_offset = 2;\n         */ this.deltaCursorOffset = protoInt64.zero;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Suffix().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Suffix().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Suffix().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Suffix, a, b);\n    }\n}\nSuffix.runtime = proto3;\nSuffix.typeName = \"exa.language_server_pb.Suffix\";\nSuffix.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"text\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 2,\n            name: \"delta_cursor_offset\",\n            kind: \"scalar\",\n            T: 3 /* ScalarType.INT64 */ \n        }\n    ]);\n/**\n * Represents a contiguous part of the completion text that is not\n * already in the document.\n * Next ID: 4, Previous field: prefix.\n *\n * @generated from message exa.language_server_pb.CompletionPart\n */ class CompletionPart extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: string text = 1;\n         */ this.text = \"\";\n        /**\n         * Offset in the original document where the part starts. For block\n         * parts, this is always the end of the line before the block.\n         *\n         * @generated from field: uint64 offset = 2;\n         */ this.offset = protoInt64.zero;\n        /**\n         * @generated from field: exa.language_server_pb.CompletionPartType type = 3;\n         */ this.type = CompletionPartType.UNSPECIFIED;\n        /**\n         * The section of the original line that came before this part. Only valid for\n         * COMPLETION_PART_TYPE_INLINE.\n         *\n         * @generated from field: string prefix = 4;\n         */ this.prefix = \"\";\n        /**\n         * In the case of COMPLETION_PART_TYPE_BLOCK, represents the line it is below.\n         *\n         * @generated from field: uint64 line = 5;\n         */ this.line = protoInt64.zero;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new CompletionPart().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new CompletionPart().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new CompletionPart().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(CompletionPart, a, b);\n    }\n}\nCompletionPart.runtime = proto3;\nCompletionPart.typeName = \"exa.language_server_pb.CompletionPart\";\nCompletionPart.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"text\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 2,\n            name: \"offset\",\n            kind: \"scalar\",\n            T: 4 /* ScalarType.UINT64 */ \n        },\n        {\n            no: 3,\n            name: \"type\",\n            kind: \"enum\",\n            T: proto3.getEnumType(CompletionPartType)\n        },\n        {\n            no: 4,\n            name: \"prefix\",\n            kind: \"scalar\",\n            T: 9 /* ScalarType.STRING */ \n        },\n        {\n            no: 5,\n            name: \"line\",\n            kind: \"scalar\",\n            T: 4 /* ScalarType.UINT64 */ \n        }\n    ]);\n/**\n * Next ID: 9, Previous field: completion_parts.\n *\n * @generated from message exa.language_server_pb.CompletionItem\n */ class CompletionItem extends Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: exa.codeium_common_pb.CompletionSource source = 3;\n         */ this.source = CompletionSource.UNSPECIFIED;\n        /**\n         * @generated from field: repeated exa.language_server_pb.CompletionPart completion_parts = 8;\n         */ this.completionParts = [];\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new CompletionItem().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new CompletionItem().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new CompletionItem().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(CompletionItem, a, b);\n    }\n}\nCompletionItem.runtime = proto3;\nCompletionItem.typeName = \"exa.language_server_pb.CompletionItem\";\nCompletionItem.fields = proto3.util.newFieldList(()=>[\n        {\n            no: 1,\n            name: \"completion\",\n            kind: \"message\",\n            T: Completion\n        },\n        {\n            no: 5,\n            name: \"suffix\",\n            kind: \"message\",\n            T: Suffix\n        },\n        {\n            no: 2,\n            name: \"range\",\n            kind: \"message\",\n            T: Range$1\n        },\n        {\n            no: 3,\n            name: \"source\",\n            kind: \"enum\",\n            T: proto3.getEnumType(CompletionSource)\n        },\n        {\n            no: 8,\n            name: \"completion_parts\",\n            kind: \"message\",\n            T: CompletionPart,\n            repeated: true\n        }\n    ]);\n// Copyright Exafunction, Inc.\n// @generated by protoc-gen-connect-es v1.1.3 with parameter \"target=ts,import_extension=none\"\n// @generated from file exa/language_server_pb/language_server.proto (package exa.language_server_pb, syntax proto3)\n/* eslint-disable */ // @ts-nocheck\n/**\n * @generated from service exa.language_server_pb.LanguageServerService\n */ const LanguageServerService = {\n    typeName: \"exa.language_server_pb.LanguageServerService\",\n    methods: {\n        /**\n         * @generated from rpc exa.language_server_pb.LanguageServerService.GetCompletions\n         */ getCompletions: {\n            name: \"GetCompletions\",\n            I: GetCompletionsRequest,\n            O: GetCompletionsResponse,\n            kind: MethodKind.Unary\n        },\n        /**\n         * @generated from rpc exa.language_server_pb.LanguageServerService.AcceptCompletion\n         */ acceptCompletion: {\n            name: \"AcceptCompletion\",\n            I: AcceptCompletionRequest,\n            O: AcceptCompletionResponse,\n            kind: MethodKind.Unary\n        },\n        /**\n         * @generated from rpc exa.language_server_pb.LanguageServerService.GetAuthToken\n         */ getAuthToken: {\n            name: \"GetAuthToken\",\n            I: GetAuthTokenRequest,\n            O: GetAuthTokenResponse,\n            kind: MethodKind.Unary\n        }\n    }\n};\nclass Position {\n    constructor(line, character){\n        this.line = line;\n        this.character = character;\n        this.lineNumber = line + 1;\n        this.column = character + 1;\n    }\n    static fromMonaco(position) {\n        return new Position(position.lineNumber - 1, position.column - 1);\n    }\n    static fromPosition(position) {\n        return new Position(position.line, position.character);\n    }\n}\nclass Range {\n    constructor(start, end){\n        this.start = start;\n        this.end = end;\n        this.startLineNumber = start.line + 1;\n        this.startColumn = start.character + 1;\n        this.endLineNumber = end.line + 1;\n        this.endColumn = end.character + 1;\n    }\n    static fromMonaco(range) {\n        return new Range(new Position(range.startLineNumber - 1, range.startColumn - 1), new Position(range.endLineNumber - 1, range.endColumn - 1));\n    }\n    static fromRange(range) {\n        return new Range(range.start, range.end);\n    }\n}\nclass Line {\n    constructor(text, range){\n        this.text = text;\n        this.range = range;\n    }\n}\nclass Document {\n    constructor(model){\n        this.model = model;\n        this.uri = model.uri;\n        this.languageId = model.getLanguageId();\n    }\n    get lineCount() {\n        return this.model.getLineCount();\n    }\n    lineAt(positionOrLine) {\n        if (typeof positionOrLine !== 'number') {\n            positionOrLine = positionOrLine.line;\n        }\n        return new Line(this.model.getLineContent(positionOrLine + 1), new Range(new Position(positionOrLine, 0), new Position(positionOrLine, this.model.getLineLength(positionOrLine + 1))));\n    }\n    offsetAt(position) {\n        return this.model.getOffsetAt(Position.fromPosition(position));\n    }\n    positionAt(offset) {\n        return Position.fromMonaco(this.model.getPositionAt(offset));\n    }\n    getText(range) {\n        if (!range) {\n            return this.model.getValue();\n        }\n        return this.model.getValueInRange(Range.fromRange(range));\n    }\n}\n/**\n * Returns the number of UTF-8 bytes required to represent the given Unicode code point.\n *\n * @param {number} codePointValue - The Unicode code point value.\n * @return {number} The number of UTF-8 bytes needed to represent the code point.\n */ function numUtf8BytesForCodePoint(codePointValue) {\n    if (codePointValue < 0x80) {\n        return 1;\n    }\n    if (codePointValue < 0x800) {\n        return 2;\n    }\n    if (codePointValue < 0x10000) {\n        return 3;\n    }\n    return 4;\n}\n/**\n * Calculates for some prefix of the given text, how many bytes the UTF-8\n * representation would be. Undefined behavior if the number of code units\n * doesn't correspond to a valid UTF-8 sequence.\n * @param text - Text to examine.\n * @param numCodeUnits The number of code units to look at.\n * @returns The number of bytes.\n */ function numCodeUnitsToNumUtf8Bytes(text, numCodeUnits) {\n    if (numCodeUnits === 0) {\n        return 0;\n    }\n    let curNumUtf8Bytes = 0;\n    let curNumCodeUnits = 0;\n    for (const codePoint of text){\n        curNumCodeUnits += codePoint.length;\n        curNumUtf8Bytes += numUtf8BytesForCodePoint(codePoint.codePointAt(0));\n        if (numCodeUnits !== undefined && curNumCodeUnits >= numCodeUnits) {\n            break;\n        }\n    }\n    return curNumUtf8Bytes;\n}\nfunction numUtf8BytesToNumCodeUnits(text, numUtf8Bytes) {\n    if (numUtf8Bytes === 0) {\n        return 0;\n    }\n    let curNumCodeUnits = 0;\n    let curNumUtf8Bytes = 0;\n    for (const codePoint of text){\n        curNumUtf8Bytes += numUtf8BytesForCodePoint(codePoint.codePointAt(0));\n        curNumCodeUnits += codePoint.length;\n        if (numUtf8Bytes !== undefined && curNumUtf8Bytes >= numUtf8Bytes) {\n            break;\n        }\n    }\n    return curNumCodeUnits;\n}\n/**\n * Generates a random UUID.\n */ const uuid = ()=>{\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c)=>{\n        const r = Math.random() * 16 | 0;\n        const v = c === 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n};\n/**\n * Get the current URL of the window. If this fails, a null string is returned.\n * @returns The current URL\n */ const getCurrentURL = ()=>{\n    try {\n        return window.location.href;\n    } catch (e) {\n        return null;\n    }\n};\n/**\n * Get the current package version. If this fails, a null string is returned.\n */ const getPackageVersion = ()=>{\n    try {\n        // @ts-ignore\n        return window.CODEIUM_REACT_CODE_VERSION ? window.CODEIUM_REACT_CODE_VERSION : null;\n    } catch (e) {\n        return null;\n    }\n};\n/**\n * Converts a language ID to a strongly-typed enum value.\n */ const languageIdToEnum = (languageId)=>{\n    switch(languageId.toLowerCase()){\n        case 'c':\n            return Language.C;\n        case 'clojure':\n            return Language.CLOJURE;\n        case 'coffeescript':\n            return Language.COFFEESCRIPT;\n        case 'cpp':\n            return Language.CPP;\n        case 'csharp':\n            return Language.CSHARP;\n        case 'css':\n            return Language.CSS;\n        case 'cudacpp':\n            return Language.CUDACPP;\n        case 'dockerfile':\n            return Language.DOCKERFILE;\n        case 'go':\n            return Language.GO;\n        case 'groovy':\n            return Language.GROOVY;\n        case 'handlebars':\n            return Language.HANDLEBARS;\n        case 'haskell':\n            return Language.HASKELL;\n        case 'hcl':\n            return Language.HCL;\n        case 'html':\n            return Language.HTML;\n        case 'ini':\n            return Language.INI;\n        case 'java':\n            return Language.JAVA;\n        case 'javascript':\n            return Language.JAVASCRIPT;\n        case 'json':\n            return Language.JSON;\n        case 'julia':\n            return Language.JULIA;\n        case 'kotlin':\n            return Language.KOTLIN;\n        case 'latex':\n            return Language.LATEX;\n        case 'less':\n            return Language.LESS;\n        case 'lua':\n            return Language.LUA;\n        case 'makefile':\n            return Language.MAKEFILE;\n        case 'markdown':\n            return Language.MARKDOWN;\n        case 'objectivec':\n            return Language.OBJECTIVEC;\n        case 'objectivecpp':\n            return Language.OBJECTIVECPP;\n        case 'perl':\n            return Language.PERL;\n        case 'php':\n            return Language.PHP;\n        case 'plaintext':\n            return Language.PLAINTEXT;\n        case 'protobuf':\n            return Language.PROTOBUF;\n        case 'pbtxt':\n            return Language.PBTXT;\n        case 'python':\n            return Language.PYTHON;\n        case 'r':\n            return Language.R;\n        case 'ruby':\n            return Language.RUBY;\n        case 'rust':\n            return Language.RUST;\n        case 'sass':\n            return Language.SASS;\n        case 'scala':\n            return Language.SCALA;\n        case 'scss':\n            return Language.SCSS;\n        case 'shell':\n            return Language.SHELL;\n        case 'sql':\n            return Language.SQL;\n        case 'starlark':\n            return Language.STARLARK;\n        case 'swift':\n            return Language.SWIFT;\n        case 'tsx':\n            return Language.TSX;\n        case 'typescript':\n            return Language.TYPESCRIPT;\n        case 'visualbasic':\n            return Language.VISUALBASIC;\n        case 'vue':\n            return Language.VUE;\n        case 'xml':\n            return Language.XML;\n        case 'xsl':\n            return Language.XSL;\n        case 'yaml':\n            return Language.YAML;\n        case 'svelte':\n            return Language.SVELTE;\n        case 'toml':\n            return Language.TOML;\n        case 'dart':\n            return Language.DART;\n        case 'rst':\n            return Language.RST;\n        case 'ocaml':\n            return Language.OCAML;\n        case 'cmake':\n            return Language.CMAKE;\n        case 'pascal':\n            return Language.PASCAL;\n        case 'elixir':\n            return Language.ELIXIR;\n        case 'fsharp':\n            return Language.FSHARP;\n        case 'lisp':\n            return Language.LISP;\n        case 'matlab':\n            return Language.MATLAB;\n        case 'powershell':\n            return Language.POWERSHELL;\n        case 'solidity':\n            return Language.SOLIDITY;\n        case 'ada':\n            return Language.ADA;\n        case 'ocaml_interface':\n            return Language.OCAML_INTERFACE;\n        default:\n            return Language.UNSPECIFIED;\n    }\n};\nclass MonacoInlineCompletion {\n    constructor(insertText, range, completionId){\n        this.insertText = insertText;\n        this.text = insertText;\n        this.range = range;\n        this.command = {\n            id: 'codeium.acceptCompletion',\n            title: 'Accept Completion',\n            arguments: [\n                completionId,\n                insertText\n            ]\n        };\n    }\n}\nconst EDITOR_API_KEY = 'd49954eb-cfba-4992-980f-d8fb37f0e942';\n/**\n * CompletionProvider class for Codeium.\n */ class MonacoCompletionProvider {\n    constructor(grpcClient, setStatus, setMessage, apiKey, multilineModelThreshold){\n        this.setStatus = setStatus;\n        this.setMessage = setMessage;\n        this.apiKey = apiKey;\n        this.multilineModelThreshold = multilineModelThreshold;\n        /**\n         * A list of other documents to include as context in the prompt.\n         */ this.otherDocuments = [];\n        this.sessionId = `react-editor-${uuid()}`;\n        this.client = grpcClient;\n    }\n    getAuthHeader() {\n        const metadata = this.getMetadata();\n        const headers = {\n            Authorization: `Basic ${metadata.apiKey}-${metadata.sessionId}`\n        };\n        return headers;\n    }\n    getMetadata() {\n        var _a, _b, _c;\n        const metadata = new Metadata({\n            ideName: 'web',\n            ideVersion: (_a = getCurrentURL()) !== null && _a !== void 0 ? _a : 'unknown',\n            extensionName: '@codeium/react-code-editor',\n            extensionVersion: (_b = getPackageVersion()) !== null && _b !== void 0 ? _b : 'unknown',\n            apiKey: (_c = this.apiKey) !== null && _c !== void 0 ? _c : EDITOR_API_KEY,\n            sessionId: this.sessionId\n        });\n        return metadata;\n    }\n    /**\n     * Generate CompletionAndRanges.\n     *\n     * @param model - Monaco model.\n     * @param token - Cancellation token.\n     * @returns InlineCompletions or undefined\n     */ provideInlineCompletions(model, monacoPosition, token) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const document1 = new Document(model);\n            const position = Position.fromMonaco(monacoPosition);\n            // Pre-register cancellation callback to get around bug in Monaco cancellation tokens breaking\n            // after await.\n            token.onCancellationRequested(()=>{\n                var _a;\n                return (_a = token.cancellationCallback) === null || _a === void 0 ? void 0 : _a.call(token);\n            });\n            const abortController = new AbortController();\n            token.onCancellationRequested(()=>{\n                abortController.abort();\n            });\n            const signal = abortController.signal;\n            this.setStatus(Status.PROCESSING);\n            this.setMessage('Generating completions...');\n            const documentInfo = this.getDocumentInfo(document1, position);\n            const editorOptions = {\n                tabSize: BigInt(model.getOptions().tabSize),\n                insertSpaces: model.getOptions().insertSpaces\n            };\n            let includedOtherDocs = this.otherDocuments;\n            if (includedOtherDocs.length > 10) {\n                console.warn(`Too many other documents: ${includedOtherDocs.length} (max 10)`);\n                includedOtherDocs = includedOtherDocs.slice(0, 10);\n            }\n            let multilineConfig = undefined;\n            if (this.multilineModelThreshold !== undefined) {\n                multilineConfig = new MultilineConfig({\n                    threshold: this.multilineModelThreshold\n                });\n            }\n            // Get completions.\n            let getCompletionsResponse;\n            try {\n                getCompletionsResponse = yield this.client.getCompletions({\n                    metadata: this.getMetadata(),\n                    document: documentInfo,\n                    editorOptions: editorOptions,\n                    otherDocuments: includedOtherDocs,\n                    multilineConfig\n                }, {\n                    signal,\n                    headers: this.getAuthHeader()\n                });\n            } catch (err) {\n                // Handle cancellation.\n                if (err instanceof ConnectError && err.code === Code.Canceled) ;\n                else {\n                    this.setStatus(Status.ERROR);\n                    this.setMessage('Something went wrong; please try again.');\n                }\n                return undefined;\n            }\n            if (!getCompletionsResponse.completionItems) {\n                // TODO(nick): Distinguish warning / error states here.\n                const message = ' No completions were generated';\n                this.setStatus(Status.SUCCESS);\n                this.setMessage(message);\n                return undefined;\n            }\n            const completionItems = getCompletionsResponse.completionItems;\n            // Create inline completion items from completions.\n            const inlineCompletionItems = completionItems.map((completionItem)=>this.createInlineCompletionItem(completionItem, document1)).filter((item)=>!!item);\n            this.setStatus(Status.SUCCESS);\n            let message = `Generated ${inlineCompletionItems.length} completions`;\n            if (inlineCompletionItems.length === 1) {\n                message = `Generated 1 completion`;\n            }\n            this.setMessage(message);\n            return {\n                items: inlineCompletionItems\n            };\n        });\n    }\n    /**\n     * Record that the last completion shown was accepted by the user.\n     * @param ctx - Codeium context\n     * @param completionId - unique ID of the last completion.\n     */ acceptedLastCompletion(completionId) {\n        new Promise((resolve, reject)=>{\n            this.client.acceptCompletion({\n                metadata: this.getMetadata(),\n                completionId: completionId\n            }, {\n                headers: this.getAuthHeader()\n            }).then(resolve).catch((err)=>{\n                console.log('Error: ', err);\n            });\n        });\n    }\n    /**\n     * Gets document info object for the given document.\n     *\n     * @param document - The document to get info for.\n     * @param position - Optional position used to get offset in document.\n     * @returns The document info object and additional UTF-8 byte offset.\n     */ getDocumentInfo(document1, position) {\n        // The offset is measured in bytes.\n        const text = document1.getText();\n        const numCodeUnits = document1.offsetAt(position);\n        const offset = numCodeUnitsToNumUtf8Bytes(text, numCodeUnits);\n        const language = languageIdToEnum(document1.languageId);\n        if (language === Language.UNSPECIFIED) {\n            console.warn(`Unknown language: ${document1.languageId}`);\n        }\n        const documentInfo = new Document$1({\n            text: text,\n            editorLanguage: document1.languageId,\n            language,\n            cursorOffset: BigInt(offset),\n            lineEnding: '\\n'\n        });\n        return documentInfo;\n    }\n    /**\n     * Converts the completion and range to inline completion item.\n     *\n     * @param completionItem\n     * @param document\n     * @returns Inline completion item.\n     */ createInlineCompletionItem(completionItem, document1) {\n        if (!completionItem.completion || !completionItem.range) {\n            return undefined;\n        }\n        // Create and return inlineCompletionItem.\n        const text = document1.getText();\n        const startPosition = document1.positionAt(numUtf8BytesToNumCodeUnits(text, Number(completionItem.range.startOffset)));\n        const endPosition = document1.positionAt(numUtf8BytesToNumCodeUnits(text, Number(completionItem.range.endOffset)));\n        const range = new Range(startPosition, endPosition);\n        const inlineCompletionItem = new MonacoInlineCompletion(completionItem.completion.text, range, completionItem.completion.completionId);\n        return inlineCompletionItem;\n    }\n}\nclass InlineCompletionProvider {\n    constructor(grpcClient, setCompletionCount, setCodeiumStatus, setCodeiumStatusMessage, apiKey, multilineModelThreshold){\n        this.setCompletionCount = setCompletionCount;\n        this.numCompletionsProvided = 0;\n        this.completionProvider = new MonacoCompletionProvider(grpcClient, setCodeiumStatus, setCodeiumStatusMessage, apiKey, multilineModelThreshold);\n    }\n    freeInlineCompletions() {\n    // nothing\n    }\n    provideInlineCompletions(model, position, context, token) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const completions = yield this.completionProvider.provideInlineCompletions(model, position, token);\n            // Only count completions provided if non-empty (i.e. exclude cancelled\n            // requests).\n            // TODO(nick): don't count cached results either.\n            // TODO(nick): better distinguish warning and error states.\n            if (completions) {\n                this.numCompletionsProvided += 1;\n                this.setCompletionCount(this.numCompletionsProvided);\n            }\n            return completions;\n        });\n    }\n    acceptedLastCompletion(completionId) {\n        this.completionProvider.acceptedLastCompletion(completionId);\n    }\n    updateOtherDocuments(otherDocuments) {\n        this.completionProvider.otherDocuments = otherDocuments;\n    }\n}\n/**\n * Renders the Codeium logo as an SVG image.\n *\n * @param {Object} props - The component props.\n * @param {string} props.className - The class name to apply to the SVG element.\n * @param {boolean} props.loading - Whether the logo should represent a loading state.\n * @return {JSX.Element} - The JSX element representing the SVG image.\n */ const CodeiumLogo = (_a)=>{\n    var { className, loading = false } = _a, props = __rest(_a, [\n        \"className\",\n        \"loading\"\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", Object.assign({\n        viewBox: \"0 0 124 124\",\n        \"aria-label\": \"Codeium Logo\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, props, {\n        className: className\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"mask\", {\n        id: \"mask0_306_96\",\n        style: {\n            maskType: 'alpha'\n        },\n        maskUnits: \"userSpaceOnUse\",\n        x: \"0\",\n        y: \"0\",\n        width: \"124\",\n        height: \"124\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 10C0 4.47715 4.47715 0 10 0H114C119.523 0 124 4.47715 124 10V114C124 119.523 119.523 124 114 124H10C4.47715 124 0 119.523 0 114V10Z\",\n        fill: \"#D9D9D9\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        mask: \"url(#mask0_306_96)\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M62 62L0 124V0L62 62Z\",\n        fill: \"#60D5C4\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M62 62L124 124V0L62 62Z\",\n        fill: \"#60D5C4\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M62 62L124 124L0 124L62 62Z\",\n        fill: \"#71E9D8\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M62 62L124 0L0 0L62 62Z\",\n        fill: \"#71E9D8\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M107.387 16H16.6133C16.2746 16 16 16.2746 16 16.6133V107.387C16 107.725 16.2746 108 16.6133 108H107.387C107.725 108 108 107.725 108 107.387V16.6133C108 16.2746 107.725 16 107.387 16Z\",\n        fill: \"#09B6A2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M75.196 77.1134C74.1902 77.1134 73.3102 76.7612 72.5559 76.0566C71.8375 75.3169 71.4783 74.4538 71.4783 73.4675C71.4783 72.4459 71.8375 71.5828 72.5559 70.8783C73.3102 70.1386 74.1902 69.7687 75.196 69.7687C76.2377 69.7687 77.1177 70.1386 77.8361 70.8783C78.5545 71.5828 78.9137 72.4459 78.9137 73.4675C78.9137 74.4538 78.5545 75.3169 77.8361 76.0566C77.1177 76.7612 76.2377 77.1134 75.196 77.1134Z\",\n        fill: \"white\",\n        \"aria-label\": \"right-dot\",\n        className: loading ? 'animate-blink duration-1000' : '',\n        style: {\n            animationDelay: '666ms'\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M62.3573 77.1134C61.3516 77.1134 60.4715 76.7612 59.7172 76.0566C58.9988 75.3169 58.6396 74.4538 58.6396 73.4675C58.6396 72.4459 58.9988 71.5828 59.7172 70.8783C60.4715 70.1386 61.3516 69.7687 62.3573 69.7687C63.399 69.7687 64.2791 70.1386 64.9974 70.8783C65.7158 71.5828 66.075 72.4459 66.075 73.4675C66.075 74.4538 65.7158 75.3169 64.9974 76.0566C64.2791 76.7612 63.399 77.1134 62.3573 77.1134Z\",\n        fill: \"white\",\n        \"aria-label\": \"middle-dot\",\n        className: loading ? 'animate-blink duration-1000' : '',\n        style: {\n            animationDelay: '333ms'\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M49.519 77.1134C48.5132 77.1134 47.6332 76.7612 46.8789 76.0566C46.1605 75.3169 45.8013 74.4538 45.8013 73.4675C45.8013 72.4459 46.1605 71.5828 46.8789 70.8783C47.6332 70.1386 48.5132 69.7687 49.519 69.7687C50.5607 69.7687 51.4407 70.1386 52.1591 70.8783C52.8775 71.5828 53.2367 72.4459 53.2367 73.4675C53.2367 74.4538 52.8775 75.3169 52.1591 76.0566C51.4407 76.7612 50.5607 77.1134 49.519 77.1134Z\",\n        fill: \"white\",\n        \"aria-label\": \"left-dot\",\n        className: loading ? 'animate-blink duration-1000' : '',\n        style: {\n            animationDelay: '0ms'\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M85.9869 88.6325C85.1967 88.6325 84.5501 88.3683 84.0473 87.8399C83.5444 87.3468 83.2929 86.7127 83.2929 85.9377C83.2929 85.1275 83.5444 84.4758 84.0473 83.9826C84.5501 83.4894 85.1967 83.2429 85.9869 83.2429C88.178 83.2429 89.2736 82.1684 89.2736 80.0196V67.7079C89.2736 65.2421 89.8483 63.287 90.9977 61.8427C90.423 61.1029 89.992 60.2399 89.7046 59.2535C89.4173 58.2672 89.2736 57.1575 89.2736 55.9246V43.6129C89.2736 41.4641 88.178 40.3897 85.9869 40.3897C85.1967 40.3897 84.5501 40.1431 84.0473 39.6499C83.5444 39.1567 83.2929 38.5227 83.2929 37.7477C83.2929 36.9727 83.5444 36.321 84.0473 35.7926C84.5501 35.2642 85.1967 35 85.9869 35C91.8419 35 94.7693 37.871 94.7693 43.6129V55.9246C94.7693 58.0734 95.8469 59.1478 98.0021 59.1478C98.7924 59.1478 99.4389 59.3944 99.9418 59.8876C100.481 60.3808 100.75 61.0325 100.75 61.8427C100.75 62.6177 100.481 63.2517 99.9418 63.7449C99.4389 64.2381 98.7924 64.4847 98.0021 64.4847C95.8469 64.4847 94.7693 65.5591 94.7693 67.7079V80.0196C94.7693 85.7616 91.8419 88.6325 85.9869 88.6325Z\",\n        fill: \"white\",\n        \"aria-label\": \"open-bracket\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M38.7631 88.6325C32.9081 88.6325 29.9807 85.7616 29.9807 80.0196V67.7079C29.9807 65.5591 28.9031 64.4847 26.7479 64.4847C25.9576 64.4847 25.2931 64.2381 24.7543 63.7449C24.2514 63.2517 24 62.6177 24 61.8427C24 61.0325 24.2514 60.3808 24.7543 59.8876C25.2931 59.3944 25.9576 59.1478 26.7479 59.1478C28.9031 59.1478 29.9807 58.0734 29.9807 55.9246V43.6129C29.9807 37.871 32.9081 35 38.7631 35C39.5533 35 40.1999 35.2642 40.7027 35.7926C41.2056 36.321 41.4571 36.9727 41.4571 37.7477C41.4571 38.5227 41.2056 39.1567 40.7027 39.6499C40.1999 40.1431 39.5533 40.3897 38.7631 40.3897C36.572 40.3897 35.4764 41.4641 35.4764 43.6129V55.9246C35.4764 57.1575 35.3327 58.2672 35.0454 59.2535C34.758 60.2399 34.327 61.1029 33.7522 61.8427C34.9017 63.287 35.4764 65.2421 35.4764 67.7079V80.0196C35.4764 82.1684 36.572 83.2429 38.7631 83.2429C39.5533 83.2429 40.1999 83.4894 40.7027 83.9826C41.2056 84.4758 41.4571 85.1275 41.4571 85.9377C41.4571 86.7127 41.2056 87.3468 40.7027 87.8399C40.1999 88.3683 39.5533 88.6325 38.7631 88.6325Z\",\n        fill: \"white\",\n        \"aria-label\": \"close-bracket\"\n    })));\n};\n/**\n * Merges a partial object with a fallback object, deeply combining the two.\n *\n * @param {Partial<T>} partial - the partial object to merge (can be undefined)\n * @param {T} fallback - the fallback object to merge with\n * @return {T} the merged object\n */ function deepMerge(partial, fallback) {\n    const merged = Object.assign({}, fallback);\n    for(const key in partial){\n        if (typeof partial[key] === 'object' && !Array.isArray(partial[key])) {\n            if (fallback[key] && typeof fallback[key] === 'object' && !Array.isArray(fallback[key])) {\n                merged[key] = deepMerge(partial[key], fallback[key]);\n            } else {\n                merged[key] = Object.assign({}, partial[key]);\n            }\n        } else {\n            merged[key] = partial[key];\n        }\n    }\n    return merged;\n}\n/**\n * Code editor that enables Codeium AI suggestions in the editor.\n * The layout by default is width = 100% and height = 300px. These values can be overridden by passing in a string value to the width and/or height props.\n */ const CodeiumEditor = (_a)=>{\n    var { languageServerAddress = 'https://web-backend.codeium.com', otherDocuments = [], containerClassName = '', containerStyle = {} } = _a, props = __rest(_a, [\n        \"languageServerAddress\",\n        \"otherDocuments\",\n        \"containerClassName\",\n        \"containerStyle\"\n    ]);\n    const editorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const monacoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const inlineCompletionsProviderRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [acceptedCompletionCount, setAcceptedCompletionCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(-1);\n    const [completionCount, setCompletionCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [codeiumStatus, setCodeiumStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Status.INACTIVE);\n    const [codeiumStatusMessage, setCodeiumStatusMessage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n    const [mounted, setMounted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const transport = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"CodeiumEditor.useMemo[transport]\": ()=>{\n            return createConnectTransport({\n                baseUrl: languageServerAddress,\n                useBinaryFormat: true\n            });\n        }\n    }[\"CodeiumEditor.useMemo[transport]\"], [\n        languageServerAddress\n    ]);\n    const grpcClient = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"CodeiumEditor.useMemo[grpcClient]\": ()=>{\n            return createPromiseClient(LanguageServerService, transport);\n        }\n    }[\"CodeiumEditor.useMemo[grpcClient]\"], [\n        transport\n    ]);\n    inlineCompletionsProviderRef.current = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"CodeiumEditor.useMemo\": ()=>{\n            return new InlineCompletionProvider(grpcClient, setCompletionCount, setCodeiumStatus, setCodeiumStatusMessage, props.apiKey, props.multilineModelThreshold);\n        }\n    }[\"CodeiumEditor.useMemo\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"CodeiumEditor.useEffect\": ()=>{\n            if (!(editorRef === null || editorRef === void 0 ? void 0 : editorRef.current) || !monacoRef.current || !inlineCompletionsProviderRef.current) {\n                return;\n            }\n            const monaco = monacoRef.current;\n            const providerDisposable = monaco.languages.registerInlineCompletionsProvider({\n                pattern: '**'\n            }, inlineCompletionsProviderRef.current);\n            const completionDisposable = monaco.editor.registerCommand('codeium.acceptCompletion', {\n                \"CodeiumEditor.useEffect.completionDisposable\": (_, completionId, insertText)=>{\n                    var _a;\n                    try {\n                        if (props.onAutocomplete) {\n                            props.onAutocomplete(insertText);\n                        }\n                        setAcceptedCompletionCount(acceptedCompletionCount + 1);\n                        (_a = inlineCompletionsProviderRef.current) === null || _a === void 0 ? void 0 : _a.acceptedLastCompletion(completionId);\n                    } catch (err) {\n                        console.log('Err');\n                    }\n                }\n            }[\"CodeiumEditor.useEffect.completionDisposable\"]);\n            return ({\n                \"CodeiumEditor.useEffect\": ()=>{\n                    providerDisposable.dispose();\n                    completionDisposable.dispose();\n                }\n            })[\"CodeiumEditor.useEffect\"];\n        }\n    }[\"CodeiumEditor.useEffect\"], [\n        editorRef === null || editorRef === void 0 ? void 0 : editorRef.current,\n        monacoRef === null || monacoRef === void 0 ? void 0 : monacoRef.current,\n        inlineCompletionsProviderRef === null || inlineCompletionsProviderRef === void 0 ? void 0 : inlineCompletionsProviderRef.current,\n        acceptedCompletionCount,\n        mounted\n    ]);\n    const handleEditorDidMount = (editor, monaco)=>__awaiter(void 0, void 0, void 0, function*() {\n            editorRef.current = editor;\n            monacoRef.current = monaco;\n            setMounted(true);\n            // CORS pre-flight cache optimization.\n            try {\n                yield grpcClient.getCompletions({});\n            } catch (e) {\n            // This is expected.\n            }\n            // Pass the editor instance to the user defined onMount prop.\n            if (props.onMount) {\n                props.onMount(editor, monaco);\n            }\n        });\n    // Keep other documents up to date.\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"CodeiumEditor.useEffect\": ()=>{\n            var _a;\n            (_a = inlineCompletionsProviderRef.current) === null || _a === void 0 ? void 0 : _a.updateOtherDocuments(otherDocuments);\n        }\n    }[\"CodeiumEditor.useEffect\"], [\n        otherDocuments\n    ]);\n    let defaultLanguageProps = {\n        defaultLanguage: props.language,\n        defaultValue: getDefaultValue(props.language)\n    };\n    const layout = {\n        width: props.width || '100%',\n        // The height is set to 300px by default. Otherwise, the editor when\n        // rendered with the default value will not be visible.\n        // The monaco editor's default height is 100% but it requires the user to\n        // define a container with an explicit height.\n        height: props.height || '300px'\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: Object.assign(Object.assign(Object.assign({}, layout), {\n            position: 'relative'\n        }), containerStyle),\n        className: containerClassName\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: 'https://codeium.com?referrer=codeium-editor',\n        target: \"_blank\",\n        rel: \"noreferrer noopener\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CodeiumLogo, {\n        width: 30,\n        height: 30,\n        style: {\n            position: 'absolute',\n            top: 12,\n            right: 12,\n            zIndex: 1\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ft, Object.assign({}, defaultLanguageProps, props, {\n        width: layout.width,\n        height: layout.height,\n        onMount: handleEditorDidMount,\n        options: deepMerge(props.options, {\n            scrollBeyondLastColumn: 0,\n            scrollbar: {\n                alwaysConsumeMouseWheel: false\n            },\n            codeLens: false,\n            // for resizing, but apparently might have \"severe performance impact\"\n            // automaticLayout: true,\n            minimap: {\n                enabled: false\n            },\n            quickSuggestions: false,\n            folding: false,\n            foldingHighlight: false,\n            foldingImportsByDefault: false,\n            links: false,\n            fontSize: 14,\n            wordWrap: 'on'\n        })\n    })));\n};\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@codeium/react-code-editor/dist/esm/index.js\n");

/***/ })

};
;